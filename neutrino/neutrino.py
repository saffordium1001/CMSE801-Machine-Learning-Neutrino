# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_neutrino')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_neutrino')
    _neutrino = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_neutrino', [dirname(__file__)])
        except ImportError:
            import _neutrino
            return _neutrino
        try:
            _mod = imp.load_module('_neutrino', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _neutrino = swig_import_helper()
    del swig_import_helper
else:
    import _neutrino
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _neutrino.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _neutrino.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _neutrino.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _neutrino.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _neutrino.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _neutrino.SwigPyIterator_equal(self, x)

    def copy(self):
        return _neutrino.SwigPyIterator_copy(self)

    def next(self):
        return _neutrino.SwigPyIterator_next(self)

    def __next__(self):
        return _neutrino.SwigPyIterator___next__(self)

    def previous(self):
        return _neutrino.SwigPyIterator_previous(self)

    def advance(self, n):
        return _neutrino.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _neutrino.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _neutrino.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _neutrino.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _neutrino.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _neutrino.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _neutrino.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _neutrino.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

kDEBUG = _neutrino.kDEBUG
kINFO = _neutrino.kINFO
kNORMAL = _neutrino.kNORMAL
kWARNING = _neutrino.kWARNING
kERROR = _neutrino.kERROR
kCRITICAL = _neutrino.kCRITICAL
kMSG_TYPE_MAX = _neutrino.kMSG_TYPE_MAX
class logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, logger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_logger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_logger
    __del__ = lambda self: None

    def name(self):
        return _neutrino.logger_name(self)

    def set(self, level):
        return _neutrino.logger_set(self, level)

    def level(self):
        return _neutrino.logger_level(self)

    def __lt__(self, rhs):
        return _neutrino.logger___lt__(self, rhs)
    if _newclass:
        get = staticmethod(_neutrino.logger_get)
    else:
        get = _neutrino.logger_get
    if _newclass:
        get_shared = staticmethod(_neutrino.logger_get_shared)
    else:
        get_shared = _neutrino.logger_get_shared
    if _newclass:
        default_level = staticmethod(_neutrino.logger_default_level)
    else:
        default_level = _neutrino.logger_default_level
    if _newclass:
        force_level = staticmethod(_neutrino.logger_force_level)
    else:
        force_level = _neutrino.logger_force_level

    def debug(self):
        return _neutrino.logger_debug(self)

    def info(self):
        return _neutrino.logger_info(self)

    def normal(self):
        return _neutrino.logger_normal(self)

    def warning(self):
        return _neutrino.logger_warning(self)

    def error(self):
        return _neutrino.logger_error(self)

    def send(self, *args):
        return _neutrino.logger_send(self, *args)
logger_swigregister = _neutrino.logger_swigregister
logger_swigregister(logger)
cvar = _neutrino.cvar
kINVALID_LONGLONG = cvar.kINVALID_LONGLONG
kINVALID_ULONGLONG = cvar.kINVALID_ULONGLONG
kINVALID_SIZE = cvar.kINVALID_SIZE
kINVALID_INT = cvar.kINVALID_INT
kINVALID_UINT = cvar.kINVALID_UINT
kINVALID_SHORT = cvar.kINVALID_SHORT
kINVALID_USHORT = cvar.kINVALID_USHORT
kINVALID_FLOAT = cvar.kINVALID_FLOAT
kINVALID_DOUBLE = cvar.kINVALID_DOUBLE
kINVALID_LONG = cvar.kINVALID_LONG
kStringPrefix = cvar.kStringPrefix

def logger_get(name):
    return _neutrino.logger_get(name)
logger_get = _neutrino.logger_get

def logger_get_shared():
    return _neutrino.logger_get_shared()
logger_get_shared = _neutrino.logger_get_shared

def logger_default_level(*args):
    return _neutrino.logger_default_level(*args)
logger_default_level = _neutrino.logger_default_level

def logger_force_level(l):
    return _neutrino.logger_force_level(l)
logger_force_level = _neutrino.logger_force_level

class neutrino_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neutrino_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neutrino_base, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_neutrino_base(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_neutrino_base
    __del__ = lambda self: None

    def logger(self):
        return _neutrino.neutrino_base_logger(self)

    def set_verbosity(self, level):
        return _neutrino.neutrino_base_set_verbosity(self, level)

    def name(self):
        return _neutrino.neutrino_base_name(self)
neutrino_base_swigregister = _neutrino.neutrino_base_swigregister
neutrino_base_swigregister(neutrino_base)


def ConfigFile2String(fname):
    return _neutrino.ConfigFile2String(fname)
ConfigFile2String = _neutrino.ConfigFile2String

def CreatePSetFromFile(*args):
    return _neutrino.CreatePSetFromFile(*args)
CreatePSetFromFile = _neutrino.CreatePSetFromFile

def mpi_enabled():
    return _neutrino.mpi_enabled()
mpi_enabled = _neutrino.mpi_enabled
class PSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSet, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _neutrino.delete_PSet
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _neutrino.new_PSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def name(self):
        return _neutrino.PSet_name(self)

    def __eq__(self, rhs):
        return _neutrino.PSet___eq__(self, rhs)

    def __ne__(self, rhs):
        return _neutrino.PSet___ne__(self, rhs)

    def rename(self, name):
        return _neutrino.PSet_rename(self, name)

    def clear(self):
        return _neutrino.PSet_clear(self)

    def add(self, data):
        return _neutrino.PSet_add(self, data)

    def add_value(self, key, value):
        return _neutrino.PSet_add_value(self, key, value)

    def add_pset(self, *args):
        return _neutrino.PSet_add_pset(self, *args)

    def dump(self, indent_size=0):
        return _neutrino.PSet_dump(self, indent_size)

    def data_string(self):
        return _neutrino.PSet_data_string(self)

    def get_pset(self, key):
        return _neutrino.PSet_get_pset(self, key)

    def size(self):
        return _neutrino.PSet_size(self)

    def keys(self):
        return _neutrino.PSet_keys(self)

    def value_keys(self):
        return _neutrino.PSet_value_keys(self)

    def pset_keys(self):
        return _neutrino.PSet_pset_keys(self)

    def contains_value(self, key):
        return _neutrino.PSet_contains_value(self, key)

    def contains_pset(self, key):
        return _neutrino.PSet_contains_pset(self, key)
PSet_swigregister = _neutrino.PSet_swigregister
PSet_swigregister(PSet)

class Watch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Watch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Watch, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_Watch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Watch
    __del__ = lambda self: None

    def Start(self):
        return _neutrino.Watch_Start(self)

    def WallTime(self):
        return _neutrino.Watch_WallTime(self)

    def CPUTime(self):
        return _neutrino.Watch_CPUTime(self)
Watch_swigregister = _neutrino.Watch_swigregister
Watch_swigregister(Watch)

class ConfigManager(neutrino_base):
    __swig_setmethods__ = {}
    for _s in [neutrino_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigManager, name, value)
    __swig_getmethods__ = {}
    for _s in [neutrino_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_ConfigManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_ConfigManager
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.ConfigManager_get)
    else:
        get = _neutrino.ConfigManager_get

    def AddConfigFile(self, cfg_file):
        return _neutrino.ConfigManager_AddConfigFile(self, cfg_file)

    def AddConfigString(self, cfg_str):
        return _neutrino.ConfigManager_AddConfigString(self, cfg_str)

    def GetConfig(self, cfg):
        return _neutrino.ConfigManager_GetConfig(self, cfg)
ConfigManager_swigregister = _neutrino.ConfigManager_swigregister
ConfigManager_swigregister(ConfigManager)

def ConfigManager_get():
    return _neutrino.ConfigManager_get()
ConfigManager_get = _neutrino.ConfigManager_get

class neut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neut, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_neut(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_neut
    __del__ = lambda self: None

    def what(self):
        return _neutrino.neut_what(self)
neut_swigregister = _neutrino.neut_swigregister
neut_swigregister(neut)

class Extents_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Extents_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Extents_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _neutrino.Extents_t_first_set
    __swig_getmethods__["first"] = _neutrino.Extents_t_first_get
    if _newclass:
        first = _swig_property(_neutrino.Extents_t_first_get, _neutrino.Extents_t_first_set)
    __swig_setmethods__["n"] = _neutrino.Extents_t_n_set
    __swig_getmethods__["n"] = _neutrino.Extents_t_n_get
    if _newclass:
        n = _swig_property(_neutrino.Extents_t_n_get, _neutrino.Extents_t_n_set)

    def __init__(self):
        this = _neutrino.new_Extents_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Extents_t
    __del__ = lambda self: None
Extents_t_swigregister = _neutrino.Extents_t_swigregister
Extents_t_swigregister(Extents_t)
kINVALID_INDEX = cvar.kINVALID_INDEX
kINVALID_INSTANCEID = cvar.kINVALID_INSTANCEID
kINVALID_PROJECTIONID = cvar.kINVALID_PROJECTIONID

class IDExtents_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDExtents_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDExtents_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _neutrino.IDExtents_t_first_set
    __swig_getmethods__["first"] = _neutrino.IDExtents_t_first_get
    if _newclass:
        first = _swig_property(_neutrino.IDExtents_t_first_get, _neutrino.IDExtents_t_first_set)
    __swig_setmethods__["n"] = _neutrino.IDExtents_t_n_set
    __swig_getmethods__["n"] = _neutrino.IDExtents_t_n_get
    if _newclass:
        n = _swig_property(_neutrino.IDExtents_t_n_get, _neutrino.IDExtents_t_n_set)
    __swig_setmethods__["id"] = _neutrino.IDExtents_t_id_set
    __swig_getmethods__["id"] = _neutrino.IDExtents_t_id_get
    if _newclass:
        id = _swig_property(_neutrino.IDExtents_t_id_get, _neutrino.IDExtents_t_id_set)

    def __init__(self):
        this = _neutrino.new_IDExtents_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_IDExtents_t
    __del__ = lambda self: None
IDExtents_t_swigregister = _neutrino.IDExtents_t_swigregister
IDExtents_t_swigregister(IDExtents_t)

kDISCONNECTED = _neutrino.kDISCONNECTED
kDEAD = _neutrino.kDEAD
kLOWNOISE = _neutrino.kLOWNOISE
kNOISY = _neutrino.kNOISY
kGOOD = _neutrino.kGOOD
kUNKNOWN = _neutrino.kUNKNOWN
kUnitUnknown = _neutrino.kUnitUnknown
kUnitCM = _neutrino.kUnitCM
kUnitWireTime = _neutrino.kUnitWireTime
kPoolSum = _neutrino.kPoolSum
kPoolAverage = _neutrino.kPoolAverage
kPoolMax = _neutrino.kPoolMax
kShapeShower = _neutrino.kShapeShower
kShapeTrack = _neutrino.kShapeTrack
kShapeUnknown = _neutrino.kShapeUnknown
kPoint3D = _neutrino.kPoint3D
kPointXY = _neutrino.kPointXY
kPointYZ = _neutrino.kPointYZ
kPointZX = _neutrino.kPointZX
class EventID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_EventID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventID
    __del__ = lambda self: None

    def clear(self):
        return _neutrino.EventID_clear(self)

    def run(self, *args):
        return _neutrino.EventID_run(self, *args)

    def subrun(self, *args):
        return _neutrino.EventID_subrun(self, *args)

    def event(self, *args):
        return _neutrino.EventID_event(self, *args)

    def valid(self):
        return _neutrino.EventID_valid(self)

    def __eq__(self, rhs):
        return _neutrino.EventID___eq__(self, rhs)

    def __ne__(self, rhs):
        return _neutrino.EventID___ne__(self, rhs)

    def __lt__(self, rhs):
        return _neutrino.EventID___lt__(self, rhs)

    def event_key(self):
        return _neutrino.EventID_event_key(self)

    def set_id(self, run, subrun, event):
        return _neutrino.EventID_set_id(self, run, subrun, event)
EventID_swigregister = _neutrino.EventID_swigregister
EventID_swigregister(EventID)
kINVALID_VOXELID = cvar.kINVALID_VOXELID
kNOTPRESENT = cvar.kNOTPRESENT
kNEGATIVEPEDESTAL = cvar.kNEGATIVEPEDESTAL
kINVALID_PRODUCER = cvar.kINVALID_PRODUCER

class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Vertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self, *args):
        return _neutrino.Vertex_reset(self, *args)

    def as_point2d(self, point_type):
        return _neutrino.Vertex_as_point2d(self, point_type)

    def as_point3d(self):
        return _neutrino.Vertex_as_point3d(self)

    def as_point(self, point_type, x, y, z):
        return _neutrino.Vertex_as_point(self, point_type, x, y, z)

    def x(self):
        return _neutrino.Vertex_x(self)

    def y(self):
        return _neutrino.Vertex_y(self)

    def z(self):
        return _neutrino.Vertex_z(self)

    def t(self):
        return _neutrino.Vertex_t(self)

    def __eq__(self, rhs):
        return _neutrino.Vertex___eq__(self, rhs)

    def __ne__(self, rhs):
        return _neutrino.Vertex___ne__(self, rhs)

    def __lt__(self, rhs):
        return _neutrino.Vertex___lt__(self, rhs)

    def dump(self):
        return _neutrino.Vertex_dump(self)
    __swig_destroy__ = _neutrino.delete_Vertex
    __del__ = lambda self: None
Vertex_swigregister = _neutrino.Vertex_swigregister
Vertex_swigregister(Vertex)

PARTICLE_PROCESS_STRLEN = _neutrino.PARTICLE_PROCESS_STRLEN
class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Particle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Particle
    __del__ = lambda self: None

    def px(self):
        return _neutrino.Particle_px(self)

    def py(self):
        return _neutrino.Particle_py(self)

    def pz(self):
        return _neutrino.Particle_pz(self)

    def p(self):
        return _neutrino.Particle_p(self)

    def x(self):
        return _neutrino.Particle_x(self)

    def y(self):
        return _neutrino.Particle_y(self)

    def z(self):
        return _neutrino.Particle_z(self)

    def t(self):
        return _neutrino.Particle_t(self)

    def parent_x(self):
        return _neutrino.Particle_parent_x(self)

    def parent_y(self):
        return _neutrino.Particle_parent_y(self)

    def parent_z(self):
        return _neutrino.Particle_parent_z(self)

    def parent_t(self):
        return _neutrino.Particle_parent_t(self)

    def ancestor_x(self):
        return _neutrino.Particle_ancestor_x(self)

    def ancestor_y(self):
        return _neutrino.Particle_ancestor_y(self)

    def ancestor_z(self):
        return _neutrino.Particle_ancestor_z(self)

    def ancestor_t(self):
        return _neutrino.Particle_ancestor_t(self)

    def id(self, *args):
        return _neutrino.Particle_id(self, *args)

    def mcst_index(self, *args):
        return _neutrino.Particle_mcst_index(self, *args)

    def mct_index(self, *args):
        return _neutrino.Particle_mct_index(self, *args)

    def shape(self, *args):
        return _neutrino.Particle_shape(self, *args)

    def nu_current_type(self, *args):
        return _neutrino.Particle_nu_current_type(self, *args)

    def nu_interaction_type(self, *args):
        return _neutrino.Particle_nu_interaction_type(self, *args)

    def track_id(self, *args):
        return _neutrino.Particle_track_id(self, *args)

    def pdg_code(self, *args):
        return _neutrino.Particle_pdg_code(self, *args)

    def momentum(self, px, py, pz):
        return _neutrino.Particle_momentum(self, px, py, pz)

    def position(self, *args):
        return _neutrino.Particle_position(self, *args)

    def end_position(self, *args):
        return _neutrino.Particle_end_position(self, *args)

    def first_step(self, *args):
        return _neutrino.Particle_first_step(self, *args)

    def last_step(self, *args):
        return _neutrino.Particle_last_step(self, *args)

    def distance_travel(self, *args):
        return _neutrino.Particle_distance_travel(self, *args)

    def energy_init(self, *args):
        return _neutrino.Particle_energy_init(self, *args)

    def energy_deposit(self, *args):
        return _neutrino.Particle_energy_deposit(self, *args)

    def creation_process(self, *args):
        return _neutrino.Particle_creation_process(self, *args)

    def parent_track_id(self, *args):
        return _neutrino.Particle_parent_track_id(self, *args)

    def parent_pdg_code(self, *args):
        return _neutrino.Particle_parent_pdg_code(self, *args)

    def parent_position(self, *args):
        return _neutrino.Particle_parent_position(self, *args)

    def ancestor_track_id(self, *args):
        return _neutrino.Particle_ancestor_track_id(self, *args)

    def ancestor_pdg_code(self, *args):
        return _neutrino.Particle_ancestor_pdg_code(self, *args)

    def ancestor_position(self, *args):
        return _neutrino.Particle_ancestor_position(self, *args)

    def dump(self):
        return _neutrino.Particle_dump(self)
Particle_swigregister = _neutrino.Particle_swigregister
Particle_swigregister(Particle)

class Voxel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Voxel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Voxel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Voxel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Voxel
    __del__ = lambda self: None

    def id(self):
        return _neutrino.Voxel_id(self)

    def value(self):
        return _neutrino.Voxel_value(self)

    def set(self, id, value):
        return _neutrino.Voxel_set(self, id, value)

    def __iadd__(self, value):
        return _neutrino.Voxel___iadd__(self, value)

    def __isub__(self, value):
        return _neutrino.Voxel___isub__(self, value)

    def __imul__(self, factor):
        return _neutrino.Voxel___imul__(self, factor)

    def __itruediv__(self, *args):
        return _neutrino.Voxel___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __eq__(self, *args):
        return _neutrino.Voxel___eq__(self, *args)

    def __lt__(self, *args):
        return _neutrino.Voxel___lt__(self, *args)

    def __le__(self, *args):
        return _neutrino.Voxel___le__(self, *args)

    def __gt__(self, *args):
        return _neutrino.Voxel___gt__(self, *args)

    def __ge__(self, *args):
        return _neutrino.Voxel___ge__(self, *args)
Voxel_swigregister = _neutrino.Voxel_swigregister
Voxel_swigregister(Voxel)

class kINVALID_VOXEL(Voxel):
    __swig_setmethods__ = {}
    for _s in [Voxel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, kINVALID_VOXEL, name, value)
    __swig_getmethods__ = {}
    for _s in [Voxel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, kINVALID_VOXEL, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_neutrino.kINVALID_VOXEL_getInstance)
    else:
        getInstance = _neutrino.kINVALID_VOXEL_getInstance
    __swig_destroy__ = _neutrino.delete_kINVALID_VOXEL
    __del__ = lambda self: None
kINVALID_VOXEL_swigregister = _neutrino.kINVALID_VOXEL_swigregister
kINVALID_VOXEL_swigregister(kINVALID_VOXEL)

def kINVALID_VOXEL_getInstance():
    return _neutrino.kINVALID_VOXEL_getInstance()
kINVALID_VOXEL_getInstance = _neutrino.kINVALID_VOXEL_getInstance

class VoxelSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoxelSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VoxelSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_VoxelSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_VoxelSet
    __del__ = lambda self: None

    def as_vector(self):
        return _neutrino.VoxelSet_as_vector(self)

    def find(self, id):
        return _neutrino.VoxelSet_find(self, id)

    def sum(self):
        return _neutrino.VoxelSet_sum(self)

    def mean(self):
        return _neutrino.VoxelSet_mean(self)

    def max(self):
        return _neutrino.VoxelSet_max(self)

    def min(self):
        return _neutrino.VoxelSet_min(self)

    def size(self):
        return _neutrino.VoxelSet_size(self)

    def values(self):
        return _neutrino.VoxelSet_values(self)

    def indexes(self):
        return _neutrino.VoxelSet_indexes(self)

    def clear_data(self):
        return _neutrino.VoxelSet_clear_data(self)

    def reserve(self, num):
        return _neutrino.VoxelSet_reserve(self, num)

    def threshold(self, min, max):
        return _neutrino.VoxelSet_threshold(self, min, max)

    def threshold_min(self, min):
        return _neutrino.VoxelSet_threshold_min(self, min)

    def threshold_max(self, max):
        return _neutrino.VoxelSet_threshold_max(self, max)

    def add(self, vox):
        return _neutrino.VoxelSet_add(self, vox)

    def insert(self, vox):
        return _neutrino.VoxelSet_insert(self, vox)

    def emplace(self, *args):
        return _neutrino.VoxelSet_emplace(self, *args)

    def id(self, *args):
        return _neutrino.VoxelSet_id(self, *args)

    def __iadd__(self, value):
        return _neutrino.VoxelSet___iadd__(self, value)

    def __isub__(self, value):
        return _neutrino.VoxelSet___isub__(self, value)

    def __imul__(self, factor):
        return _neutrino.VoxelSet___imul__(self, factor)

    def __itruediv__(self, *args):
        return _neutrino.VoxelSet___itruediv__(self, *args)
    __idiv__ = __itruediv__


VoxelSet_swigregister = _neutrino.VoxelSet_swigregister
VoxelSet_swigregister(VoxelSet)

class VoxelSetArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoxelSetArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VoxelSetArray, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_VoxelSetArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_VoxelSetArray
    __del__ = lambda self: None

    def size(self):
        return _neutrino.VoxelSetArray_size(self)

    def voxel_set(self, id):
        return _neutrino.VoxelSetArray_voxel_set(self, id)

    def as_vector(self):
        return _neutrino.VoxelSetArray_as_vector(self)

    def sum(self):
        return _neutrino.VoxelSetArray_sum(self)

    def mean(self):
        return _neutrino.VoxelSetArray_mean(self)

    def max(self):
        return _neutrino.VoxelSetArray_max(self)

    def min(self):
        return _neutrino.VoxelSetArray_min(self)

    def threshold(self, min, max):
        return _neutrino.VoxelSetArray_threshold(self, min, max)

    def threshold_min(self, min):
        return _neutrino.VoxelSetArray_threshold_min(self, min)

    def threshold_max(self, max):
        return _neutrino.VoxelSetArray_threshold_max(self, max)

    def clear_data(self):
        return _neutrino.VoxelSetArray_clear_data(self)

    def resize(self, num):
        return _neutrino.VoxelSetArray_resize(self, num)

    def writeable_voxel_set(self, id):
        return _neutrino.VoxelSetArray_writeable_voxel_set(self, id)

    def emplace(self, *args):
        return _neutrino.VoxelSetArray_emplace(self, *args)

    def insert(self, voxel_v):
        return _neutrino.VoxelSetArray_insert(self, voxel_v)

    def move(self, orig):
        return _neutrino.VoxelSetArray_move(self, orig)
VoxelSetArray_swigregister = _neutrino.VoxelSetArray_swigregister
VoxelSetArray_swigregister(VoxelSetArray)

class DataProductFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataProductFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataProductFactoryBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _neutrino.delete_DataProductFactoryBase
    __del__ = lambda self: None

    def create(self):
        return _neutrino.DataProductFactoryBase_create(self)
DataProductFactoryBase_swigregister = _neutrino.DataProductFactoryBase_swigregister
DataProductFactoryBase_swigregister(DataProductFactoryBase)

class DataProductFactory(neutrino_base):
    __swig_setmethods__ = {}
    for _s in [neutrino_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataProductFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [neutrino_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataProductFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_DataProductFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_DataProductFactory
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.DataProductFactory_get)
    else:
        get = _neutrino.DataProductFactory_get

    def add_factory(self, type, factory):
        return _neutrino.DataProductFactory_add_factory(self, type, factory)

    def create(self, *args):
        return _neutrino.DataProductFactory_create(self, *args)

    def list(self):
        return _neutrino.DataProductFactory_list(self)

    def unique_product_count(self):
        return _neutrino.DataProductFactory_unique_product_count(self)

    def product_names(self):
        return _neutrino.DataProductFactory_product_names(self)
DataProductFactory_swigregister = _neutrino.DataProductFactory_swigregister
DataProductFactory_swigregister(DataProductFactory)

def DataProductFactory_get():
    return _neutrino.DataProductFactory_get()
DataProductFactory_get = _neutrino.DataProductFactory_get

class EventBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _neutrino.delete_EventBase
    __del__ = lambda self: None

    def clear(self):
        return _neutrino.EventBase_clear(self)

    def initialize(self, group, compression):
        return _neutrino.EventBase_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventBase_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups):
        return _neutrino.EventBase_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventBase_finalize(self)

    def open_in_datasets(self, group):
        return _neutrino.EventBase_open_in_datasets(self, group)

    def open_out_datasets(self, group):
        return _neutrino.EventBase_open_out_datasets(self, group)
    __swig_setmethods__["_open_in_datasets"] = _neutrino.EventBase__open_in_datasets_set
    __swig_getmethods__["_open_in_datasets"] = _neutrino.EventBase__open_in_datasets_get
    if _newclass:
        _open_in_datasets = _swig_property(_neutrino.EventBase__open_in_datasets_get, _neutrino.EventBase__open_in_datasets_set)
    __swig_setmethods__["_open_in_dataspaces"] = _neutrino.EventBase__open_in_dataspaces_set
    __swig_getmethods__["_open_in_dataspaces"] = _neutrino.EventBase__open_in_dataspaces_get
    if _newclass:
        _open_in_dataspaces = _swig_property(_neutrino.EventBase__open_in_dataspaces_get, _neutrino.EventBase__open_in_dataspaces_set)
    __swig_setmethods__["_open_out_datasets"] = _neutrino.EventBase__open_out_datasets_set
    __swig_getmethods__["_open_out_datasets"] = _neutrino.EventBase__open_out_datasets_get
    if _newclass:
        _open_out_datasets = _swig_property(_neutrino.EventBase__open_out_datasets_get, _neutrino.EventBase__open_out_datasets_set)
    __swig_setmethods__["_open_out_dataspaces"] = _neutrino.EventBase__open_out_dataspaces_set
    __swig_getmethods__["_open_out_dataspaces"] = _neutrino.EventBase__open_out_dataspaces_get
    if _newclass:
        _open_out_dataspaces = _swig_property(_neutrino.EventBase__open_out_dataspaces_get, _neutrino.EventBase__open_out_dataspaces_set)
    __swig_setmethods__["_data_types"] = _neutrino.EventBase__data_types_set
    __swig_getmethods__["_data_types"] = _neutrino.EventBase__data_types_get
    if _newclass:
        _data_types = _swig_property(_neutrino.EventBase__data_types_get, _neutrino.EventBase__data_types_set)

    def get_num_objects(self, group):
        return _neutrino.EventBase_get_num_objects(self, group)
EventBase_swigregister = _neutrino.EventBase_swigregister
EventBase_swigregister(EventBase)

class EventParticle(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventParticle, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventParticle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventParticle
    __del__ = lambda self: None

    def set(self, part_v):
        return _neutrino.EventParticle_set(self, part_v)

    def append(self, part):
        return _neutrino.EventParticle_append(self, part)

    def emplace_back(self, part):
        return _neutrino.EventParticle_emplace_back(self, part)

    def emplace(self, part_v):
        return _neutrino.EventParticle_emplace(self, part_v)

    def as_vector(self):
        return _neutrino.EventParticle_as_vector(self)

    def size(self):
        return _neutrino.EventParticle_size(self)

    def clear(self):
        return _neutrino.EventParticle_clear(self)

    def initialize(self, group, compression):
        return _neutrino.EventParticle_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventParticle_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventParticle_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventParticle_finalize(self)
    if _newclass:
        to_particle = staticmethod(_neutrino.EventParticle_to_particle)
    else:
        to_particle = _neutrino.EventParticle_to_particle
EventParticle_swigregister = _neutrino.EventParticle_swigregister
EventParticle_swigregister(EventParticle)

def EventParticle_to_particle(e):
    return _neutrino.EventParticle_to_particle(e)
EventParticle_to_particle = _neutrino.EventParticle_to_particle

class EventParticleFactory(DataProductFactoryBase):
    __swig_setmethods__ = {}
    for _s in [DataProductFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventParticleFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [DataProductFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventParticleFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventParticleFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventParticleFactory
    __del__ = lambda self: None

    def create(self):
        return _neutrino.EventParticleFactory_create(self)
EventParticleFactory_swigregister = _neutrino.EventParticleFactory_swigregister
EventParticleFactory_swigregister(EventParticleFactory)

class IOManager(neutrino_base):
    __swig_setmethods__ = {}
    for _s in [neutrino_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOManager, name, value)
    __swig_getmethods__ = {}
    for _s in [neutrino_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOManager, name)
    __repr__ = _swig_repr
    kREAD = _neutrino.IOManager_kREAD
    kWRITE = _neutrino.IOManager_kWRITE
    kBOTH = _neutrino.IOManager_kBOTH
    kUnknown = _neutrino.IOManager_kUnknown
    kInputFileUnread = _neutrino.IOManager_kInputFileUnread
    kInputFileRead = _neutrino.IOManager_kInputFileRead
    kOutputOnly = _neutrino.IOManager_kOutputOnly
    kVirtual = _neutrino.IOManager_kVirtual

    def __init__(self, *args):
        this = _neutrino.new_IOManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_IOManager
    __del__ = lambda self: None

    def io_mode(self):
        return _neutrino.IOManager_io_mode(self)

    def reset(self):
        return _neutrino.IOManager_reset(self)

    def add_in_file(self, *args):
        return _neutrino.IOManager_add_in_file(self, *args)

    def clear_in_file(self):
        return _neutrino.IOManager_clear_in_file(self)

    def set_core_driver(self, opt=True):
        return _neutrino.IOManager_set_core_driver(self, opt)

    def set_out_file(self, name):
        return _neutrino.IOManager_set_out_file(self, name)

    def producer_id(self, name):
        return _neutrino.IOManager_producer_id(self, name)

    def product_type(self, id):
        return _neutrino.IOManager_product_type(self, id)

    def configure(self, cfg):
        return _neutrino.IOManager_configure(self, cfg)

    def initialize(self, color=0):
        return _neutrino.IOManager_initialize(self, color)

    def read_entry(self, index, force_reload=False):
        return _neutrino.IOManager_read_entry(self, index, force_reload)

    def save_entry(self):
        return _neutrino.IOManager_save_entry(self)

    def finalize(self):
        return _neutrino.IOManager_finalize(self)

    def clear_entry(self):
        return _neutrino.IOManager_clear_entry(self)

    def set_id(self, run, subrun, event):
        return _neutrino.IOManager_set_id(self, run, subrun, event)

    def current_entry(self):
        return _neutrino.IOManager_current_entry(self)

    def get_n_entries_out(self):
        return _neutrino.IOManager_get_n_entries_out(self)

    def get_file_out_name(self):
        return _neutrino.IOManager_get_file_out_name(self)

    def get_n_entries(self):
        return _neutrino.IOManager_get_n_entries(self)

    def get_data(self, *args):
        return _neutrino.IOManager_get_data(self, *args)

    def event_id(self):
        return _neutrino.IOManager_event_id(self)

    def last_event_id(self):
        return _neutrino.IOManager_last_event_id(self)

    def producer_list(self, type):
        return _neutrino.IOManager_producer_list(self, type)

    def product_list(self):
        return _neutrino.IOManager_product_list(self)

    def file_list(self):
        return _neutrino.IOManager_file_list(self)
IOManager_swigregister = _neutrino.IOManager_swigregister
IOManager_swigregister(IOManager)

class EventSparseCluster2DFactory(DataProductFactoryBase):
    __swig_setmethods__ = {}
    for _s in [DataProductFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventSparseCluster2DFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [DataProductFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventSparseCluster2DFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventSparseCluster2DFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventSparseCluster2DFactory
    __del__ = lambda self: None

    def create(self):
        return _neutrino.EventSparseCluster2DFactory_create(self)
EventSparseCluster2DFactory_swigregister = _neutrino.EventSparseCluster2DFactory_swigregister
EventSparseCluster2DFactory_swigregister(EventSparseCluster2DFactory)

class EventSparseCluster3DFactory(DataProductFactoryBase):
    __swig_setmethods__ = {}
    for _s in [DataProductFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventSparseCluster3DFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [DataProductFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventSparseCluster3DFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventSparseCluster3DFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventSparseCluster3DFactory
    __del__ = lambda self: None

    def create(self):
        return _neutrino.EventSparseCluster3DFactory_create(self)
EventSparseCluster3DFactory_swigregister = _neutrino.EventSparseCluster3DFactory_swigregister
EventSparseCluster3DFactory_swigregister(EventSparseCluster3DFactory)

class Point2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Point2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Point2D
    __del__ = lambda self: None
    __swig_setmethods__["x"] = _neutrino.Point2D_x_set
    __swig_getmethods__["x"] = _neutrino.Point2D_x_get
    if _newclass:
        x = _swig_property(_neutrino.Point2D_x_get, _neutrino.Point2D_x_set)

    def __imul__(self, rhs):
        return _neutrino.Point2D___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _neutrino.Point2D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, rhs):
        return _neutrino.Point2D___mul__(self, rhs)

    def __truediv__(self, *args):
        return _neutrino.Point2D___truediv__(self, *args)
    __div__ = __truediv__


Point2D_swigregister = _neutrino.Point2D_swigregister
Point2D_swigregister(Point2D)

class Point3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Point3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Point3D
    __del__ = lambda self: None
    __swig_setmethods__["x"] = _neutrino.Point3D_x_set
    __swig_getmethods__["x"] = _neutrino.Point3D_x_get
    if _newclass:
        x = _swig_property(_neutrino.Point3D_x_get, _neutrino.Point3D_x_set)

    def __imul__(self, rhs):
        return _neutrino.Point3D___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _neutrino.Point3D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, rhs):
        return _neutrino.Point3D___mul__(self, rhs)

    def __truediv__(self, *args):
        return _neutrino.Point3D___truediv__(self, *args)
    __div__ = __truediv__


Point3D_swigregister = _neutrino.Point3D_swigregister
Point3D_swigregister(Point3D)

class BBox2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBox2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BBox2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_BBox2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def update(self, *args):
        return _neutrino.BBox2D_update(self, *args)

    def empty(self):
        return _neutrino.BBox2D_empty(self)

    def origin(self):
        return _neutrino.BBox2D_origin(self)

    def bottom_left(self):
        return _neutrino.BBox2D_bottom_left(self)

    def top_right(self):
        return _neutrino.BBox2D_top_right(self)

    def center(self):
        return _neutrino.BBox2D_center(self)

    def min(self):
        return _neutrino.BBox2D_min(self)

    def max(self):
        return _neutrino.BBox2D_max(self)

    def dimensions(self):
        return _neutrino.BBox2D_dimensions(self)

    def area(self):
        return _neutrino.BBox2D_area(self)

    def volume(self):
        return _neutrino.BBox2D_volume(self)

    def id(self):
        return _neutrino.BBox2D_id(self)

    def dump(self):
        return _neutrino.BBox2D_dump(self)

    def overlap(self, box):
        return _neutrino.BBox2D_overlap(self, box)

    def inclusive(self, box):
        return _neutrino.BBox2D_inclusive(self, box)

    def contains(self, point):
        return _neutrino.BBox2D_contains(self, point)
    __swig_destroy__ = _neutrino.delete_BBox2D
    __del__ = lambda self: None
BBox2D_swigregister = _neutrino.BBox2D_swigregister
BBox2D_swigregister(BBox2D)

class BBox3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBox3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BBox3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_BBox3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def update(self, *args):
        return _neutrino.BBox3D_update(self, *args)

    def empty(self):
        return _neutrino.BBox3D_empty(self)

    def origin(self):
        return _neutrino.BBox3D_origin(self)

    def bottom_left(self):
        return _neutrino.BBox3D_bottom_left(self)

    def top_right(self):
        return _neutrino.BBox3D_top_right(self)

    def center(self):
        return _neutrino.BBox3D_center(self)

    def min(self):
        return _neutrino.BBox3D_min(self)

    def max(self):
        return _neutrino.BBox3D_max(self)

    def dimensions(self):
        return _neutrino.BBox3D_dimensions(self)

    def area(self):
        return _neutrino.BBox3D_area(self)

    def volume(self):
        return _neutrino.BBox3D_volume(self)

    def id(self):
        return _neutrino.BBox3D_id(self)

    def dump(self):
        return _neutrino.BBox3D_dump(self)

    def overlap(self, box):
        return _neutrino.BBox3D_overlap(self, box)

    def inclusive(self, box):
        return _neutrino.BBox3D_inclusive(self, box)

    def contains(self, point):
        return _neutrino.BBox3D_contains(self, point)
    __swig_destroy__ = _neutrino.delete_BBox3D
    __del__ = lambda self: None
BBox3D_swigregister = _neutrino.BBox3D_swigregister
BBox3D_swigregister(BBox3D)

class ImageMeta2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMeta2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMeta2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_ImageMeta2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, rhs):
        return _neutrino.ImageMeta2D___eq__(self, rhs)

    def __ne__(self, rhs):
        return _neutrino.ImageMeta2D___ne__(self, rhs)

    def projection_id(self):
        return _neutrino.ImageMeta2D_projection_id(self)

    def id(self):
        return _neutrino.ImageMeta2D_id(self)

    def n_dims(self):
        return _neutrino.ImageMeta2D_n_dims(self)

    def image_size(self, *args):
        return _neutrino.ImageMeta2D_image_size(self, *args)

    def number_of_voxels(self, *args):
        return _neutrino.ImageMeta2D_number_of_voxels(self, *args)

    def origin(self, *args):
        return _neutrino.ImageMeta2D_origin(self, *args)

    def total_voxels(self):
        return _neutrino.ImageMeta2D_total_voxels(self)

    def total_volume(self):
        return _neutrino.ImageMeta2D_total_volume(self)

    def voxel_dimensions(self, *args):
        return _neutrino.ImageMeta2D_voxel_dimensions(self, *args)

    def unit(self):
        return _neutrino.ImageMeta2D_unit(self)

    def index(self, *args):
        return _neutrino.ImageMeta2D_index(self, *args)

    def coordinates(self, *args):
        return _neutrino.ImageMeta2D_coordinates(self, *args)

    def coordinate(self, index, axis):
        return _neutrino.ImageMeta2D_coordinate(self, index, axis)

    def position(self, *args):
        return _neutrino.ImageMeta2D_position(self, *args)

    def min(self, *args):
        return _neutrino.ImageMeta2D_min(self, *args)

    def max(self, *args):
        return _neutrino.ImageMeta2D_max(self, *args)

    def position_to_index(self, position):
        return _neutrino.ImageMeta2D_position_to_index(self, position)

    def position_to_coordinate(self, *args):
        return _neutrino.ImageMeta2D_position_to_coordinate(self, *args)

    def set_dimension(self, axis, image_size, number_of_voxels, origin=0):
        return _neutrino.ImageMeta2D_set_dimension(self, axis, image_size, number_of_voxels, origin)

    def set_projection_id(self, projection_id):
        return _neutrino.ImageMeta2D_set_projection_id(self, projection_id)

    def is_valid(self):
        return _neutrino.ImageMeta2D_is_valid(self)

    def cols(self):
        return _neutrino.ImageMeta2D_cols(self)

    def rows(self):
        return _neutrino.ImageMeta2D_rows(self)

    def dump(self):
        return _neutrino.ImageMeta2D_dump(self)
    __swig_destroy__ = _neutrino.delete_ImageMeta2D
    __del__ = lambda self: None
ImageMeta2D_swigregister = _neutrino.ImageMeta2D_swigregister
ImageMeta2D_swigregister(ImageMeta2D)

class ImageMeta3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMeta3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMeta3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_ImageMeta3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, rhs):
        return _neutrino.ImageMeta3D___eq__(self, rhs)

    def __ne__(self, rhs):
        return _neutrino.ImageMeta3D___ne__(self, rhs)

    def projection_id(self):
        return _neutrino.ImageMeta3D_projection_id(self)

    def id(self):
        return _neutrino.ImageMeta3D_id(self)

    def n_dims(self):
        return _neutrino.ImageMeta3D_n_dims(self)

    def image_size(self, *args):
        return _neutrino.ImageMeta3D_image_size(self, *args)

    def number_of_voxels(self, *args):
        return _neutrino.ImageMeta3D_number_of_voxels(self, *args)

    def origin(self, *args):
        return _neutrino.ImageMeta3D_origin(self, *args)

    def total_voxels(self):
        return _neutrino.ImageMeta3D_total_voxels(self)

    def total_volume(self):
        return _neutrino.ImageMeta3D_total_volume(self)

    def voxel_dimensions(self, *args):
        return _neutrino.ImageMeta3D_voxel_dimensions(self, *args)

    def unit(self):
        return _neutrino.ImageMeta3D_unit(self)

    def index(self, *args):
        return _neutrino.ImageMeta3D_index(self, *args)

    def coordinates(self, *args):
        return _neutrino.ImageMeta3D_coordinates(self, *args)

    def coordinate(self, index, axis):
        return _neutrino.ImageMeta3D_coordinate(self, index, axis)

    def position(self, *args):
        return _neutrino.ImageMeta3D_position(self, *args)

    def min(self, *args):
        return _neutrino.ImageMeta3D_min(self, *args)

    def max(self, *args):
        return _neutrino.ImageMeta3D_max(self, *args)

    def position_to_index(self, position):
        return _neutrino.ImageMeta3D_position_to_index(self, position)

    def position_to_coordinate(self, *args):
        return _neutrino.ImageMeta3D_position_to_coordinate(self, *args)

    def set_dimension(self, axis, image_size, number_of_voxels, origin=0):
        return _neutrino.ImageMeta3D_set_dimension(self, axis, image_size, number_of_voxels, origin)

    def set_projection_id(self, projection_id):
        return _neutrino.ImageMeta3D_set_projection_id(self, projection_id)

    def is_valid(self):
        return _neutrino.ImageMeta3D_is_valid(self)

    def cols(self):
        return _neutrino.ImageMeta3D_cols(self)

    def rows(self):
        return _neutrino.ImageMeta3D_rows(self)

    def dump(self):
        return _neutrino.ImageMeta3D_dump(self)
    __swig_destroy__ = _neutrino.delete_ImageMeta3D
    __del__ = lambda self: None
ImageMeta3D_swigregister = _neutrino.ImageMeta3D_swigregister
ImageMeta3D_swigregister(ImageMeta3D)

class Tensor1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Tensor1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Tensor1D
    __del__ = lambda self: None

    def reset(self, arg2):
        return _neutrino.Tensor1D_reset(self, arg2)
    kSum = _neutrino.Tensor1D_kSum
    kAverage = _neutrino.Tensor1D_kAverage
    kMaxPool = _neutrino.Tensor1D_kMaxPool
    kOverWrite = _neutrino.Tensor1D_kOverWrite

    def size(self):
        return _neutrino.Tensor1D_size(self)

    def pixel(self, *args):
        return _neutrino.Tensor1D_pixel(self, *args)

    def meta(self):
        return _neutrino.Tensor1D_meta(self)

    def copy(self, *args):
        return _neutrino.Tensor1D_copy(self, *args)

    def reverse_copy(self, *args):
        return _neutrino.Tensor1D_reverse_copy(self, *args)

    def as_vector(self):
        return _neutrino.Tensor1D_as_vector(self)

    def set_pixel(self, *args):
        return _neutrino.Tensor1D_set_pixel(self, *args)

    def paint(self, value):
        return _neutrino.Tensor1D_paint(self, value)

    def threshold(self, thresh, lower):
        return _neutrino.Tensor1D_threshold(self, thresh, lower)

    def binarize(self, thresh, lower_overwrite, upper_overwrite):
        return _neutrino.Tensor1D_binarize(self, thresh, lower_overwrite, upper_overwrite)

    def clear_data(self):
        return _neutrino.Tensor1D_clear_data(self)

    def move(self, *args):
        return _neutrino.Tensor1D_move(self, *args)

    def __add__(self, val):
        return _neutrino.Tensor1D___add__(self, val)

    def __sub__(self, val):
        return _neutrino.Tensor1D___sub__(self, val)

    def __imul__(self, val):
        return _neutrino.Tensor1D___imul__(self, val)

    def __mul__(self, val):
        return _neutrino.Tensor1D___mul__(self, val)

    def __itruediv__(self, *args):
        return _neutrino.Tensor1D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _neutrino.Tensor1D___truediv__(self, *args)
    __div__ = __truediv__



    def __isub__(self, *args):
        return _neutrino.Tensor1D___isub__(self, *args)

    def __iadd__(self, *args):
        return _neutrino.Tensor1D___iadd__(self, *args)

    def eltwise(self, *args):
        return _neutrino.Tensor1D_eltwise(self, *args)
Tensor1D_swigregister = _neutrino.Tensor1D_swigregister
Tensor1D_swigregister(Tensor1D)

class Image2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Image2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Image2D
    __del__ = lambda self: None

    def reset(self, arg2):
        return _neutrino.Image2D_reset(self, arg2)
    kSum = _neutrino.Image2D_kSum
    kAverage = _neutrino.Image2D_kAverage
    kMaxPool = _neutrino.Image2D_kMaxPool
    kOverWrite = _neutrino.Image2D_kOverWrite

    def size(self):
        return _neutrino.Image2D_size(self)

    def pixel(self, *args):
        return _neutrino.Image2D_pixel(self, *args)

    def meta(self):
        return _neutrino.Image2D_meta(self)

    def copy(self, *args):
        return _neutrino.Image2D_copy(self, *args)

    def reverse_copy(self, *args):
        return _neutrino.Image2D_reverse_copy(self, *args)

    def as_vector(self):
        return _neutrino.Image2D_as_vector(self)

    def set_pixel(self, *args):
        return _neutrino.Image2D_set_pixel(self, *args)

    def paint(self, value):
        return _neutrino.Image2D_paint(self, value)

    def threshold(self, thresh, lower):
        return _neutrino.Image2D_threshold(self, thresh, lower)

    def binarize(self, thresh, lower_overwrite, upper_overwrite):
        return _neutrino.Image2D_binarize(self, thresh, lower_overwrite, upper_overwrite)

    def clear_data(self):
        return _neutrino.Image2D_clear_data(self)

    def move(self, *args):
        return _neutrino.Image2D_move(self, *args)

    def __add__(self, val):
        return _neutrino.Image2D___add__(self, val)

    def __sub__(self, val):
        return _neutrino.Image2D___sub__(self, val)

    def __imul__(self, val):
        return _neutrino.Image2D___imul__(self, val)

    def __mul__(self, val):
        return _neutrino.Image2D___mul__(self, val)

    def __itruediv__(self, *args):
        return _neutrino.Image2D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _neutrino.Image2D___truediv__(self, *args)
    __div__ = __truediv__



    def __isub__(self, *args):
        return _neutrino.Image2D___isub__(self, *args)

    def __iadd__(self, *args):
        return _neutrino.Image2D___iadd__(self, *args)

    def eltwise(self, *args):
        return _neutrino.Image2D_eltwise(self, *args)
Image2D_swigregister = _neutrino.Image2D_swigregister
Image2D_swigregister(Image2D)

class Tensor3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Tensor3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Tensor3D
    __del__ = lambda self: None

    def reset(self, arg2):
        return _neutrino.Tensor3D_reset(self, arg2)
    kSum = _neutrino.Tensor3D_kSum
    kAverage = _neutrino.Tensor3D_kAverage
    kMaxPool = _neutrino.Tensor3D_kMaxPool
    kOverWrite = _neutrino.Tensor3D_kOverWrite

    def size(self):
        return _neutrino.Tensor3D_size(self)

    def pixel(self, *args):
        return _neutrino.Tensor3D_pixel(self, *args)

    def meta(self):
        return _neutrino.Tensor3D_meta(self)

    def copy(self, *args):
        return _neutrino.Tensor3D_copy(self, *args)

    def reverse_copy(self, *args):
        return _neutrino.Tensor3D_reverse_copy(self, *args)

    def as_vector(self):
        return _neutrino.Tensor3D_as_vector(self)

    def set_pixel(self, *args):
        return _neutrino.Tensor3D_set_pixel(self, *args)

    def paint(self, value):
        return _neutrino.Tensor3D_paint(self, value)

    def threshold(self, thresh, lower):
        return _neutrino.Tensor3D_threshold(self, thresh, lower)

    def binarize(self, thresh, lower_overwrite, upper_overwrite):
        return _neutrino.Tensor3D_binarize(self, thresh, lower_overwrite, upper_overwrite)

    def clear_data(self):
        return _neutrino.Tensor3D_clear_data(self)

    def move(self, *args):
        return _neutrino.Tensor3D_move(self, *args)

    def __add__(self, val):
        return _neutrino.Tensor3D___add__(self, val)

    def __sub__(self, val):
        return _neutrino.Tensor3D___sub__(self, val)

    def __imul__(self, val):
        return _neutrino.Tensor3D___imul__(self, val)

    def __mul__(self, val):
        return _neutrino.Tensor3D___mul__(self, val)

    def __itruediv__(self, *args):
        return _neutrino.Tensor3D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _neutrino.Tensor3D___truediv__(self, *args)
    __div__ = __truediv__



    def __isub__(self, *args):
        return _neutrino.Tensor3D___isub__(self, *args)

    def __iadd__(self, *args):
        return _neutrino.Tensor3D___iadd__(self, *args)

    def eltwise(self, *args):
        return _neutrino.Tensor3D_eltwise(self, *args)
Tensor3D_swigregister = _neutrino.Tensor3D_swigregister
Tensor3D_swigregister(Tensor3D)

class Tensor4D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor4D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor4D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Tensor4D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Tensor4D
    __del__ = lambda self: None

    def reset(self, arg2):
        return _neutrino.Tensor4D_reset(self, arg2)
    kSum = _neutrino.Tensor4D_kSum
    kAverage = _neutrino.Tensor4D_kAverage
    kMaxPool = _neutrino.Tensor4D_kMaxPool
    kOverWrite = _neutrino.Tensor4D_kOverWrite

    def size(self):
        return _neutrino.Tensor4D_size(self)

    def pixel(self, *args):
        return _neutrino.Tensor4D_pixel(self, *args)

    def meta(self):
        return _neutrino.Tensor4D_meta(self)

    def copy(self, *args):
        return _neutrino.Tensor4D_copy(self, *args)

    def reverse_copy(self, *args):
        return _neutrino.Tensor4D_reverse_copy(self, *args)

    def as_vector(self):
        return _neutrino.Tensor4D_as_vector(self)

    def set_pixel(self, *args):
        return _neutrino.Tensor4D_set_pixel(self, *args)

    def paint(self, value):
        return _neutrino.Tensor4D_paint(self, value)

    def threshold(self, thresh, lower):
        return _neutrino.Tensor4D_threshold(self, thresh, lower)

    def binarize(self, thresh, lower_overwrite, upper_overwrite):
        return _neutrino.Tensor4D_binarize(self, thresh, lower_overwrite, upper_overwrite)

    def clear_data(self):
        return _neutrino.Tensor4D_clear_data(self)

    def move(self, *args):
        return _neutrino.Tensor4D_move(self, *args)

    def __add__(self, val):
        return _neutrino.Tensor4D___add__(self, val)

    def __sub__(self, val):
        return _neutrino.Tensor4D___sub__(self, val)

    def __imul__(self, val):
        return _neutrino.Tensor4D___imul__(self, val)

    def __mul__(self, val):
        return _neutrino.Tensor4D___mul__(self, val)

    def __itruediv__(self, *args):
        return _neutrino.Tensor4D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _neutrino.Tensor4D___truediv__(self, *args)
    __div__ = __truediv__



    def __isub__(self, *args):
        return _neutrino.Tensor4D___isub__(self, *args)

    def __iadd__(self, *args):
        return _neutrino.Tensor4D___iadd__(self, *args)

    def eltwise(self, *args):
        return _neutrino.Tensor4D_eltwise(self, *args)
Tensor4D_swigregister = _neutrino.Tensor4D_swigregister
Tensor4D_swigregister(Tensor4D)

class EventTensor1D(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventTensor1D, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventTensor1D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventTensor1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def as_vector(self):
        return _neutrino.EventTensor1D_as_vector(self)

    def image2d_array(self):
        return _neutrino.EventTensor1D_image2d_array(self)

    def clear(self):
        return _neutrino.EventTensor1D_clear(self)

    def append(self, img):
        return _neutrino.EventTensor1D_append(self, img)

    def emplace(self, *args):
        return _neutrino.EventTensor1D_emplace(self, *args)

    def move(self, image_v):
        return _neutrino.EventTensor1D_move(self, image_v)

    def initialize(self, group, compression):
        return _neutrino.EventTensor1D_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventTensor1D_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventTensor1D_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventTensor1D_finalize(self)
    if _newclass:
        to_image2d = staticmethod(_neutrino.EventTensor1D_to_image2d)
    else:
        to_image2d = _neutrino.EventTensor1D_to_image2d
    if _newclass:
        to_tensor = staticmethod(_neutrino.EventTensor1D_to_tensor)
    else:
        to_tensor = _neutrino.EventTensor1D_to_tensor
    __swig_destroy__ = _neutrino.delete_EventTensor1D
    __del__ = lambda self: None
EventTensor1D_swigregister = _neutrino.EventTensor1D_swigregister
EventTensor1D_swigregister(EventTensor1D)

def EventTensor1D_to_image2d(e):
    return _neutrino.EventTensor1D_to_image2d(e)
EventTensor1D_to_image2d = _neutrino.EventTensor1D_to_image2d

def EventTensor1D_to_tensor(e):
    return _neutrino.EventTensor1D_to_tensor(e)
EventTensor1D_to_tensor = _neutrino.EventTensor1D_to_tensor

class EventImage2D(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventImage2D, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventImage2D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventImage2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def as_vector(self):
        return _neutrino.EventImage2D_as_vector(self)

    def image2d_array(self):
        return _neutrino.EventImage2D_image2d_array(self)

    def clear(self):
        return _neutrino.EventImage2D_clear(self)

    def append(self, img):
        return _neutrino.EventImage2D_append(self, img)

    def emplace(self, *args):
        return _neutrino.EventImage2D_emplace(self, *args)

    def move(self, image_v):
        return _neutrino.EventImage2D_move(self, image_v)

    def initialize(self, group, compression):
        return _neutrino.EventImage2D_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventImage2D_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventImage2D_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventImage2D_finalize(self)
    if _newclass:
        to_image2d = staticmethod(_neutrino.EventImage2D_to_image2d)
    else:
        to_image2d = _neutrino.EventImage2D_to_image2d
    if _newclass:
        to_tensor = staticmethod(_neutrino.EventImage2D_to_tensor)
    else:
        to_tensor = _neutrino.EventImage2D_to_tensor
    __swig_destroy__ = _neutrino.delete_EventImage2D
    __del__ = lambda self: None
EventImage2D_swigregister = _neutrino.EventImage2D_swigregister
EventImage2D_swigregister(EventImage2D)

def EventImage2D_to_image2d(e):
    return _neutrino.EventImage2D_to_image2d(e)
EventImage2D_to_image2d = _neutrino.EventImage2D_to_image2d

def EventImage2D_to_tensor(e):
    return _neutrino.EventImage2D_to_tensor(e)
EventImage2D_to_tensor = _neutrino.EventImage2D_to_tensor

class EventTensor3D(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventTensor3D, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventTensor3D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventTensor3D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def as_vector(self):
        return _neutrino.EventTensor3D_as_vector(self)

    def image2d_array(self):
        return _neutrino.EventTensor3D_image2d_array(self)

    def clear(self):
        return _neutrino.EventTensor3D_clear(self)

    def append(self, img):
        return _neutrino.EventTensor3D_append(self, img)

    def emplace(self, *args):
        return _neutrino.EventTensor3D_emplace(self, *args)

    def move(self, image_v):
        return _neutrino.EventTensor3D_move(self, image_v)

    def initialize(self, group, compression):
        return _neutrino.EventTensor3D_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventTensor3D_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventTensor3D_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventTensor3D_finalize(self)
    if _newclass:
        to_image2d = staticmethod(_neutrino.EventTensor3D_to_image2d)
    else:
        to_image2d = _neutrino.EventTensor3D_to_image2d
    if _newclass:
        to_tensor = staticmethod(_neutrino.EventTensor3D_to_tensor)
    else:
        to_tensor = _neutrino.EventTensor3D_to_tensor
    __swig_destroy__ = _neutrino.delete_EventTensor3D
    __del__ = lambda self: None
EventTensor3D_swigregister = _neutrino.EventTensor3D_swigregister
EventTensor3D_swigregister(EventTensor3D)

def EventTensor3D_to_image2d(e):
    return _neutrino.EventTensor3D_to_image2d(e)
EventTensor3D_to_image2d = _neutrino.EventTensor3D_to_image2d

def EventTensor3D_to_tensor(e):
    return _neutrino.EventTensor3D_to_tensor(e)
EventTensor3D_to_tensor = _neutrino.EventTensor3D_to_tensor

class EventTensor4D(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventTensor4D, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventTensor4D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventTensor4D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def as_vector(self):
        return _neutrino.EventTensor4D_as_vector(self)

    def image2d_array(self):
        return _neutrino.EventTensor4D_image2d_array(self)

    def clear(self):
        return _neutrino.EventTensor4D_clear(self)

    def append(self, img):
        return _neutrino.EventTensor4D_append(self, img)

    def emplace(self, *args):
        return _neutrino.EventTensor4D_emplace(self, *args)

    def move(self, image_v):
        return _neutrino.EventTensor4D_move(self, image_v)

    def initialize(self, group, compression):
        return _neutrino.EventTensor4D_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventTensor4D_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventTensor4D_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventTensor4D_finalize(self)
    if _newclass:
        to_image2d = staticmethod(_neutrino.EventTensor4D_to_image2d)
    else:
        to_image2d = _neutrino.EventTensor4D_to_image2d
    if _newclass:
        to_tensor = staticmethod(_neutrino.EventTensor4D_to_tensor)
    else:
        to_tensor = _neutrino.EventTensor4D_to_tensor
    __swig_destroy__ = _neutrino.delete_EventTensor4D
    __del__ = lambda self: None
EventTensor4D_swigregister = _neutrino.EventTensor4D_swigregister
EventTensor4D_swigregister(EventTensor4D)

def EventTensor4D_to_image2d(e):
    return _neutrino.EventTensor4D_to_image2d(e)
EventTensor4D_to_image2d = _neutrino.EventTensor4D_to_image2d

def EventTensor4D_to_tensor(e):
    return _neutrino.EventTensor4D_to_tensor(e)
EventTensor4D_to_tensor = _neutrino.EventTensor4D_to_tensor

class SparseTensor2D(VoxelSet):
    __swig_setmethods__ = {}
    for _s in [VoxelSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseTensor2D, name, value)
    __swig_getmethods__ = {}
    for _s in [VoxelSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseTensor2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_SparseTensor2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_SparseTensor2D
    __del__ = lambda self: None

    def emplace(self, *args):
        return _neutrino.SparseTensor2D_emplace(self, *args)

    def set(self, vs, meta):
        return _neutrino.SparseTensor2D_set(self, vs, meta)

    def clear_data(self):
        return _neutrino.SparseTensor2D_clear_data(self)

    def meta(self, *args):
        return _neutrino.SparseTensor2D_meta(self, *args)
SparseTensor2D_swigregister = _neutrino.SparseTensor2D_swigregister
SparseTensor2D_swigregister(SparseTensor2D)

class SparseTensor3D(VoxelSet):
    __swig_setmethods__ = {}
    for _s in [VoxelSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseTensor3D, name, value)
    __swig_getmethods__ = {}
    for _s in [VoxelSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseTensor3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_SparseTensor3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_SparseTensor3D
    __del__ = lambda self: None

    def emplace(self, *args):
        return _neutrino.SparseTensor3D_emplace(self, *args)

    def set(self, vs, meta):
        return _neutrino.SparseTensor3D_set(self, vs, meta)

    def clear_data(self):
        return _neutrino.SparseTensor3D_clear_data(self)

    def meta(self, *args):
        return _neutrino.SparseTensor3D_meta(self, *args)
SparseTensor3D_swigregister = _neutrino.SparseTensor3D_swigregister
SparseTensor3D_swigregister(SparseTensor3D)

class EventSparseTensor2D(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventSparseTensor2D, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventSparseTensor2D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventSparseTensor2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def as_vector(self):
        return _neutrino.EventSparseTensor2D_as_vector(self)

    def sparse_tensor(self, id):
        return _neutrino.EventSparseTensor2D_sparse_tensor(self, id)

    def size(self):
        return _neutrino.EventSparseTensor2D_size(self)

    def clear(self):
        return _neutrino.EventSparseTensor2D_clear(self)

    def emplace(self, *args):
        return _neutrino.EventSparseTensor2D_emplace(self, *args)

    def set(self, *args):
        return _neutrino.EventSparseTensor2D_set(self, *args)

    def initialize(self, group, compression):
        return _neutrino.EventSparseTensor2D_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventSparseTensor2D_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventSparseTensor2D_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventSparseTensor2D_finalize(self)
    if _newclass:
        to_sparse_tensor = staticmethod(_neutrino.EventSparseTensor2D_to_sparse_tensor)
    else:
        to_sparse_tensor = _neutrino.EventSparseTensor2D_to_sparse_tensor
    __swig_destroy__ = _neutrino.delete_EventSparseTensor2D
    __del__ = lambda self: None
EventSparseTensor2D_swigregister = _neutrino.EventSparseTensor2D_swigregister
EventSparseTensor2D_swigregister(EventSparseTensor2D)

def EventSparseTensor2D_to_sparse_tensor(e):
    return _neutrino.EventSparseTensor2D_to_sparse_tensor(e)
EventSparseTensor2D_to_sparse_tensor = _neutrino.EventSparseTensor2D_to_sparse_tensor

class EventSparseTensor3D(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventSparseTensor3D, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventSparseTensor3D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventSparseTensor3D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def as_vector(self):
        return _neutrino.EventSparseTensor3D_as_vector(self)

    def sparse_tensor(self, id):
        return _neutrino.EventSparseTensor3D_sparse_tensor(self, id)

    def size(self):
        return _neutrino.EventSparseTensor3D_size(self)

    def clear(self):
        return _neutrino.EventSparseTensor3D_clear(self)

    def emplace(self, *args):
        return _neutrino.EventSparseTensor3D_emplace(self, *args)

    def set(self, *args):
        return _neutrino.EventSparseTensor3D_set(self, *args)

    def initialize(self, group, compression):
        return _neutrino.EventSparseTensor3D_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventSparseTensor3D_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventSparseTensor3D_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventSparseTensor3D_finalize(self)
    if _newclass:
        to_sparse_tensor = staticmethod(_neutrino.EventSparseTensor3D_to_sparse_tensor)
    else:
        to_sparse_tensor = _neutrino.EventSparseTensor3D_to_sparse_tensor
    __swig_destroy__ = _neutrino.delete_EventSparseTensor3D
    __del__ = lambda self: None
EventSparseTensor3D_swigregister = _neutrino.EventSparseTensor3D_swigregister
EventSparseTensor3D_swigregister(EventSparseTensor3D)

def EventSparseTensor3D_to_sparse_tensor(e):
    return _neutrino.EventSparseTensor3D_to_sparse_tensor(e)
EventSparseTensor3D_to_sparse_tensor = _neutrino.EventSparseTensor3D_to_sparse_tensor

class SparseCluster2D(VoxelSetArray):
    __swig_setmethods__ = {}
    for _s in [VoxelSetArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseCluster2D, name, value)
    __swig_getmethods__ = {}
    for _s in [VoxelSetArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseCluster2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_SparseCluster2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_SparseCluster2D
    __del__ = lambda self: None

    def clear_data(self):
        return _neutrino.SparseCluster2D_clear_data(self)

    def set(self, vsa, meta):
        return _neutrino.SparseCluster2D_set(self, vsa, meta)

    def meta(self, *args):
        return _neutrino.SparseCluster2D_meta(self, *args)
SparseCluster2D_swigregister = _neutrino.SparseCluster2D_swigregister
SparseCluster2D_swigregister(SparseCluster2D)

class SparseCluster3D(VoxelSetArray):
    __swig_setmethods__ = {}
    for _s in [VoxelSetArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseCluster3D, name, value)
    __swig_getmethods__ = {}
    for _s in [VoxelSetArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseCluster3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_SparseCluster3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_SparseCluster3D
    __del__ = lambda self: None

    def clear_data(self):
        return _neutrino.SparseCluster3D_clear_data(self)

    def set(self, vsa, meta):
        return _neutrino.SparseCluster3D_set(self, vsa, meta)

    def meta(self, *args):
        return _neutrino.SparseCluster3D_meta(self, *args)
SparseCluster3D_swigregister = _neutrino.SparseCluster3D_swigregister
SparseCluster3D_swigregister(SparseCluster3D)

class EventSparseCluster2D(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventSparseCluster2D, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventSparseCluster2D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventSparseCluster2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventSparseCluster2D
    __del__ = lambda self: None

    def clear(self):
        return _neutrino.EventSparseCluster2D_clear(self)

    def as_vector(self):
        return _neutrino.EventSparseCluster2D_as_vector(self)

    def sparse_cluster(self, id):
        return _neutrino.EventSparseCluster2D_sparse_cluster(self, id)

    def size(self):
        return _neutrino.EventSparseCluster2D_size(self)

    def set(self, clusters):
        return _neutrino.EventSparseCluster2D_set(self, clusters)

    def emplace(self, *args):
        return _neutrino.EventSparseCluster2D_emplace(self, *args)

    def initialize(self, group, compression):
        return _neutrino.EventSparseCluster2D_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventSparseCluster2D_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventSparseCluster2D_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventSparseCluster2D_finalize(self)
    if _newclass:
        to_sparse_cluster = staticmethod(_neutrino.EventSparseCluster2D_to_sparse_cluster)
    else:
        to_sparse_cluster = _neutrino.EventSparseCluster2D_to_sparse_cluster
EventSparseCluster2D_swigregister = _neutrino.EventSparseCluster2D_swigregister
EventSparseCluster2D_swigregister(EventSparseCluster2D)

def EventSparseCluster2D_to_sparse_cluster(e):
    return _neutrino.EventSparseCluster2D_to_sparse_cluster(e)
EventSparseCluster2D_to_sparse_cluster = _neutrino.EventSparseCluster2D_to_sparse_cluster

class EventSparseCluster3D(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventSparseCluster3D, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventSparseCluster3D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventSparseCluster3D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventSparseCluster3D
    __del__ = lambda self: None

    def clear(self):
        return _neutrino.EventSparseCluster3D_clear(self)

    def as_vector(self):
        return _neutrino.EventSparseCluster3D_as_vector(self)

    def sparse_cluster(self, id):
        return _neutrino.EventSparseCluster3D_sparse_cluster(self, id)

    def size(self):
        return _neutrino.EventSparseCluster3D_size(self)

    def set(self, clusters):
        return _neutrino.EventSparseCluster3D_set(self, clusters)

    def emplace(self, *args):
        return _neutrino.EventSparseCluster3D_emplace(self, *args)

    def initialize(self, group, compression):
        return _neutrino.EventSparseCluster3D_initialize(self, group, compression)

    def serialize(self, group):
        return _neutrino.EventSparseCluster3D_serialize(self, group)

    def deserialize(self, group, entry, reopen_groups=False):
        return _neutrino.EventSparseCluster3D_deserialize(self, group, entry, reopen_groups)

    def finalize(self):
        return _neutrino.EventSparseCluster3D_finalize(self)
    if _newclass:
        to_sparse_cluster = staticmethod(_neutrino.EventSparseCluster3D_to_sparse_cluster)
    else:
        to_sparse_cluster = _neutrino.EventSparseCluster3D_to_sparse_cluster
EventSparseCluster3D_swigregister = _neutrino.EventSparseCluster3D_swigregister
EventSparseCluster3D_swigregister(EventSparseCluster3D)

def EventSparseCluster3D_to_sparse_cluster(e):
    return _neutrino.EventSparseCluster3D_to_sparse_cluster(e)
EventSparseCluster3D_to_sparse_cluster = _neutrino.EventSparseCluster3D_to_sparse_cluster

class VectorOfDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfDouble___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfDouble___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfDouble___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfDouble___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfDouble_pop(self)

    def append(self, x):
        return _neutrino.VectorOfDouble_append(self, x)

    def empty(self):
        return _neutrino.VectorOfDouble_empty(self)

    def size(self):
        return _neutrino.VectorOfDouble_size(self)

    def swap(self, v):
        return _neutrino.VectorOfDouble_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfDouble_begin(self)

    def end(self):
        return _neutrino.VectorOfDouble_end(self)

    def rbegin(self):
        return _neutrino.VectorOfDouble_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfDouble_rend(self)

    def clear(self):
        return _neutrino.VectorOfDouble_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfDouble_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfDouble_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfDouble_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfDouble_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfDouble_front(self)

    def back(self):
        return _neutrino.VectorOfDouble_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfDouble_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfDouble_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfDouble_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfDouble_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfDouble_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfDouble
    __del__ = lambda self: None
VectorOfDouble_swigregister = _neutrino.VectorOfDouble_swigregister
VectorOfDouble_swigregister(VectorOfDouble)

class VectorOfFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfFloat___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfFloat___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfFloat___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfFloat___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfFloat_pop(self)

    def append(self, x):
        return _neutrino.VectorOfFloat_append(self, x)

    def empty(self):
        return _neutrino.VectorOfFloat_empty(self)

    def size(self):
        return _neutrino.VectorOfFloat_size(self)

    def swap(self, v):
        return _neutrino.VectorOfFloat_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfFloat_begin(self)

    def end(self):
        return _neutrino.VectorOfFloat_end(self)

    def rbegin(self):
        return _neutrino.VectorOfFloat_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfFloat_rend(self)

    def clear(self):
        return _neutrino.VectorOfFloat_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfFloat_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfFloat_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfFloat_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfFloat_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfFloat_front(self)

    def back(self):
        return _neutrino.VectorOfFloat_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfFloat_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfFloat_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfFloat_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfFloat_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfFloat_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfFloat
    __del__ = lambda self: None
VectorOfFloat_swigregister = _neutrino.VectorOfFloat_swigregister
VectorOfFloat_swigregister(VectorOfFloat)

class VectorOfSizet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfSizet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfSizet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfSizet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfSizet___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfSizet___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfSizet___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfSizet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfSizet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfSizet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfSizet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfSizet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfSizet___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfSizet_pop(self)

    def append(self, x):
        return _neutrino.VectorOfSizet_append(self, x)

    def empty(self):
        return _neutrino.VectorOfSizet_empty(self)

    def size(self):
        return _neutrino.VectorOfSizet_size(self)

    def swap(self, v):
        return _neutrino.VectorOfSizet_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfSizet_begin(self)

    def end(self):
        return _neutrino.VectorOfSizet_end(self)

    def rbegin(self):
        return _neutrino.VectorOfSizet_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfSizet_rend(self)

    def clear(self):
        return _neutrino.VectorOfSizet_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfSizet_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfSizet_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfSizet_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfSizet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfSizet_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfSizet_front(self)

    def back(self):
        return _neutrino.VectorOfSizet_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfSizet_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfSizet_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfSizet_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfSizet_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfSizet_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfSizet
    __del__ = lambda self: None
VectorOfSizet_swigregister = _neutrino.VectorOfSizet_swigregister
VectorOfSizet_swigregister(VectorOfSizet)

class VectorOfInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfInt___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfInt___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfInt___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfInt___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfInt_pop(self)

    def append(self, x):
        return _neutrino.VectorOfInt_append(self, x)

    def empty(self):
        return _neutrino.VectorOfInt_empty(self)

    def size(self):
        return _neutrino.VectorOfInt_size(self)

    def swap(self, v):
        return _neutrino.VectorOfInt_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfInt_begin(self)

    def end(self):
        return _neutrino.VectorOfInt_end(self)

    def rbegin(self):
        return _neutrino.VectorOfInt_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfInt_rend(self)

    def clear(self):
        return _neutrino.VectorOfInt_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfInt_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfInt_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfInt_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfInt_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfInt_front(self)

    def back(self):
        return _neutrino.VectorOfInt_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfInt_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfInt_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfInt_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfInt_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfInt_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfInt
    __del__ = lambda self: None
VectorOfInt_swigregister = _neutrino.VectorOfInt_swigregister
VectorOfInt_swigregister(VectorOfInt)

class VectorOfEventID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfEventID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfEventID, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfEventID_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfEventID___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfEventID___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfEventID___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfEventID___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfEventID___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfEventID___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfEventID___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfEventID___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfEventID___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfEventID_pop(self)

    def append(self, x):
        return _neutrino.VectorOfEventID_append(self, x)

    def empty(self):
        return _neutrino.VectorOfEventID_empty(self)

    def size(self):
        return _neutrino.VectorOfEventID_size(self)

    def swap(self, v):
        return _neutrino.VectorOfEventID_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfEventID_begin(self)

    def end(self):
        return _neutrino.VectorOfEventID_end(self)

    def rbegin(self):
        return _neutrino.VectorOfEventID_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfEventID_rend(self)

    def clear(self):
        return _neutrino.VectorOfEventID_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfEventID_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfEventID_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfEventID_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfEventID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfEventID_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfEventID_front(self)

    def back(self):
        return _neutrino.VectorOfEventID_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfEventID_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfEventID_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfEventID_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfEventID_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfEventID_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfEventID
    __del__ = lambda self: None
VectorOfEventID_swigregister = _neutrino.VectorOfEventID_swigregister
VectorOfEventID_swigregister(VectorOfEventID)

class VectorOfString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfString___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfString___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfString___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfString___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfString_pop(self)

    def append(self, x):
        return _neutrino.VectorOfString_append(self, x)

    def empty(self):
        return _neutrino.VectorOfString_empty(self)

    def size(self):
        return _neutrino.VectorOfString_size(self)

    def swap(self, v):
        return _neutrino.VectorOfString_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfString_begin(self)

    def end(self):
        return _neutrino.VectorOfString_end(self)

    def rbegin(self):
        return _neutrino.VectorOfString_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfString_rend(self)

    def clear(self):
        return _neutrino.VectorOfString_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfString_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfString_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfString_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfString_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfString_front(self)

    def back(self):
        return _neutrino.VectorOfString_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfString_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfString_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfString_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfString_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfString_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfString
    __del__ = lambda self: None
VectorOfString_swigregister = _neutrino.VectorOfString_swigregister
VectorOfString_swigregister(VectorOfString)

class VectorOfVoxel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfVoxel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfVoxel, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfVoxel_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfVoxel___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfVoxel___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfVoxel___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfVoxel___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfVoxel___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfVoxel___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfVoxel___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfVoxel___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfVoxel___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfVoxel_pop(self)

    def append(self, x):
        return _neutrino.VectorOfVoxel_append(self, x)

    def empty(self):
        return _neutrino.VectorOfVoxel_empty(self)

    def size(self):
        return _neutrino.VectorOfVoxel_size(self)

    def swap(self, v):
        return _neutrino.VectorOfVoxel_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfVoxel_begin(self)

    def end(self):
        return _neutrino.VectorOfVoxel_end(self)

    def rbegin(self):
        return _neutrino.VectorOfVoxel_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfVoxel_rend(self)

    def clear(self):
        return _neutrino.VectorOfVoxel_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfVoxel_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfVoxel_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfVoxel_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfVoxel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfVoxel_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfVoxel_front(self)

    def back(self):
        return _neutrino.VectorOfVoxel_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfVoxel_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfVoxel_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfVoxel_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfVoxel_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfVoxel_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfVoxel
    __del__ = lambda self: None
VectorOfVoxel_swigregister = _neutrino.VectorOfVoxel_swigregister
VectorOfVoxel_swigregister(VectorOfVoxel)

class VectorOfVoxelSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfVoxelSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfVoxelSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfVoxelSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfVoxelSet___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfVoxelSet___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfVoxelSet___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfVoxelSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfVoxelSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfVoxelSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfVoxelSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfVoxelSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfVoxelSet___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfVoxelSet_pop(self)

    def append(self, x):
        return _neutrino.VectorOfVoxelSet_append(self, x)

    def empty(self):
        return _neutrino.VectorOfVoxelSet_empty(self)

    def size(self):
        return _neutrino.VectorOfVoxelSet_size(self)

    def swap(self, v):
        return _neutrino.VectorOfVoxelSet_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfVoxelSet_begin(self)

    def end(self):
        return _neutrino.VectorOfVoxelSet_end(self)

    def rbegin(self):
        return _neutrino.VectorOfVoxelSet_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfVoxelSet_rend(self)

    def clear(self):
        return _neutrino.VectorOfVoxelSet_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfVoxelSet_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfVoxelSet_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfVoxelSet_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfVoxelSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfVoxelSet_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfVoxelSet_front(self)

    def back(self):
        return _neutrino.VectorOfVoxelSet_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfVoxelSet_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfVoxelSet_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfVoxelSet_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfVoxelSet_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfVoxelSet_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfVoxelSet
    __del__ = lambda self: None
VectorOfVoxelSet_swigregister = _neutrino.VectorOfVoxelSet_swigregister
VectorOfVoxelSet_swigregister(VectorOfVoxelSet)

class VectorOfSparse2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfSparse2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfSparse2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfSparse2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfSparse2D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfSparse2D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfSparse2D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfSparse2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfSparse2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfSparse2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfSparse2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfSparse2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfSparse2D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfSparse2D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfSparse2D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfSparse2D_empty(self)

    def size(self):
        return _neutrino.VectorOfSparse2D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfSparse2D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfSparse2D_begin(self)

    def end(self):
        return _neutrino.VectorOfSparse2D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfSparse2D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfSparse2D_rend(self)

    def clear(self):
        return _neutrino.VectorOfSparse2D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfSparse2D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfSparse2D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfSparse2D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfSparse2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfSparse2D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfSparse2D_front(self)

    def back(self):
        return _neutrino.VectorOfSparse2D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfSparse2D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfSparse2D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfSparse2D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfSparse2D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfSparse2D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfSparse2D
    __del__ = lambda self: None
VectorOfSparse2D_swigregister = _neutrino.VectorOfSparse2D_swigregister
VectorOfSparse2D_swigregister(VectorOfSparse2D)

class VectorOfSparse3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfSparse3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfSparse3D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfSparse3D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfSparse3D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfSparse3D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfSparse3D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfSparse3D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfSparse3D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfSparse3D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfSparse3D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfSparse3D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfSparse3D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfSparse3D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfSparse3D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfSparse3D_empty(self)

    def size(self):
        return _neutrino.VectorOfSparse3D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfSparse3D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfSparse3D_begin(self)

    def end(self):
        return _neutrino.VectorOfSparse3D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfSparse3D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfSparse3D_rend(self)

    def clear(self):
        return _neutrino.VectorOfSparse3D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfSparse3D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfSparse3D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfSparse3D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfSparse3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfSparse3D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfSparse3D_front(self)

    def back(self):
        return _neutrino.VectorOfSparse3D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfSparse3D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfSparse3D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfSparse3D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfSparse3D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfSparse3D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfSparse3D
    __del__ = lambda self: None
VectorOfSparse3D_swigregister = _neutrino.VectorOfSparse3D_swigregister
VectorOfSparse3D_swigregister(VectorOfSparse3D)

class VectorOfCluster2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfCluster2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfCluster2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfCluster2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfCluster2D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfCluster2D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfCluster2D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfCluster2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfCluster2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfCluster2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfCluster2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfCluster2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfCluster2D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfCluster2D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfCluster2D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfCluster2D_empty(self)

    def size(self):
        return _neutrino.VectorOfCluster2D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfCluster2D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfCluster2D_begin(self)

    def end(self):
        return _neutrino.VectorOfCluster2D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfCluster2D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfCluster2D_rend(self)

    def clear(self):
        return _neutrino.VectorOfCluster2D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfCluster2D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfCluster2D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfCluster2D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfCluster2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfCluster2D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfCluster2D_front(self)

    def back(self):
        return _neutrino.VectorOfCluster2D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfCluster2D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfCluster2D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfCluster2D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfCluster2D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfCluster2D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfCluster2D
    __del__ = lambda self: None
VectorOfCluster2D_swigregister = _neutrino.VectorOfCluster2D_swigregister
VectorOfCluster2D_swigregister(VectorOfCluster2D)

class VectorOfCluster3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfCluster3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfCluster3D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfCluster3D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfCluster3D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfCluster3D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfCluster3D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfCluster3D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfCluster3D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfCluster3D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfCluster3D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfCluster3D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfCluster3D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfCluster3D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfCluster3D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfCluster3D_empty(self)

    def size(self):
        return _neutrino.VectorOfCluster3D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfCluster3D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfCluster3D_begin(self)

    def end(self):
        return _neutrino.VectorOfCluster3D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfCluster3D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfCluster3D_rend(self)

    def clear(self):
        return _neutrino.VectorOfCluster3D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfCluster3D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfCluster3D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfCluster3D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfCluster3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfCluster3D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfCluster3D_front(self)

    def back(self):
        return _neutrino.VectorOfCluster3D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfCluster3D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfCluster3D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfCluster3D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfCluster3D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfCluster3D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfCluster3D
    __del__ = lambda self: None
VectorOfCluster3D_swigregister = _neutrino.VectorOfCluster3D_swigregister
VectorOfCluster3D_swigregister(VectorOfCluster3D)

class VectorOfParticle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfParticle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfParticle, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfParticle_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfParticle___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfParticle___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfParticle___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfParticle___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfParticle___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfParticle___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfParticle___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfParticle___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfParticle___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfParticle_pop(self)

    def append(self, x):
        return _neutrino.VectorOfParticle_append(self, x)

    def empty(self):
        return _neutrino.VectorOfParticle_empty(self)

    def size(self):
        return _neutrino.VectorOfParticle_size(self)

    def swap(self, v):
        return _neutrino.VectorOfParticle_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfParticle_begin(self)

    def end(self):
        return _neutrino.VectorOfParticle_end(self)

    def rbegin(self):
        return _neutrino.VectorOfParticle_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfParticle_rend(self)

    def clear(self):
        return _neutrino.VectorOfParticle_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfParticle_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfParticle_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfParticle_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfParticle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfParticle_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfParticle_front(self)

    def back(self):
        return _neutrino.VectorOfParticle_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfParticle_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfParticle_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfParticle_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfParticle_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfParticle_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfParticle
    __del__ = lambda self: None
VectorOfParticle_swigregister = _neutrino.VectorOfParticle_swigregister
VectorOfParticle_swigregister(VectorOfParticle)

class VectorOfTensor1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfTensor1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfTensor1D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfTensor1D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfTensor1D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfTensor1D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfTensor1D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfTensor1D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfTensor1D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfTensor1D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfTensor1D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfTensor1D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfTensor1D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfTensor1D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfTensor1D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfTensor1D_empty(self)

    def size(self):
        return _neutrino.VectorOfTensor1D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfTensor1D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfTensor1D_begin(self)

    def end(self):
        return _neutrino.VectorOfTensor1D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfTensor1D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfTensor1D_rend(self)

    def clear(self):
        return _neutrino.VectorOfTensor1D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfTensor1D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfTensor1D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfTensor1D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfTensor1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfTensor1D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfTensor1D_front(self)

    def back(self):
        return _neutrino.VectorOfTensor1D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfTensor1D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfTensor1D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfTensor1D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfTensor1D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfTensor1D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfTensor1D
    __del__ = lambda self: None
VectorOfTensor1D_swigregister = _neutrino.VectorOfTensor1D_swigregister
VectorOfTensor1D_swigregister(VectorOfTensor1D)

class VectorOfImage2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfImage2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfImage2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfImage2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfImage2D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfImage2D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfImage2D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfImage2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfImage2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfImage2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfImage2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfImage2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfImage2D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfImage2D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfImage2D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfImage2D_empty(self)

    def size(self):
        return _neutrino.VectorOfImage2D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfImage2D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfImage2D_begin(self)

    def end(self):
        return _neutrino.VectorOfImage2D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfImage2D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfImage2D_rend(self)

    def clear(self):
        return _neutrino.VectorOfImage2D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfImage2D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfImage2D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfImage2D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfImage2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfImage2D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfImage2D_front(self)

    def back(self):
        return _neutrino.VectorOfImage2D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfImage2D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfImage2D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfImage2D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfImage2D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfImage2D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfImage2D
    __del__ = lambda self: None
VectorOfImage2D_swigregister = _neutrino.VectorOfImage2D_swigregister
VectorOfImage2D_swigregister(VectorOfImage2D)

class VectorOfTensor3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfTensor3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfTensor3D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfTensor3D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfTensor3D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfTensor3D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfTensor3D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfTensor3D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfTensor3D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfTensor3D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfTensor3D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfTensor3D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfTensor3D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfTensor3D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfTensor3D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfTensor3D_empty(self)

    def size(self):
        return _neutrino.VectorOfTensor3D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfTensor3D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfTensor3D_begin(self)

    def end(self):
        return _neutrino.VectorOfTensor3D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfTensor3D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfTensor3D_rend(self)

    def clear(self):
        return _neutrino.VectorOfTensor3D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfTensor3D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfTensor3D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfTensor3D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfTensor3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfTensor3D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfTensor3D_front(self)

    def back(self):
        return _neutrino.VectorOfTensor3D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfTensor3D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfTensor3D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfTensor3D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfTensor3D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfTensor3D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfTensor3D
    __del__ = lambda self: None
VectorOfTensor3D_swigregister = _neutrino.VectorOfTensor3D_swigregister
VectorOfTensor3D_swigregister(VectorOfTensor3D)

class VectorOfTensor4D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfTensor4D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfTensor4D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfTensor4D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfTensor4D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfTensor4D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfTensor4D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfTensor4D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfTensor4D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfTensor4D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfTensor4D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfTensor4D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfTensor4D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfTensor4D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfTensor4D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfTensor4D_empty(self)

    def size(self):
        return _neutrino.VectorOfTensor4D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfTensor4D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfTensor4D_begin(self)

    def end(self):
        return _neutrino.VectorOfTensor4D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfTensor4D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfTensor4D_rend(self)

    def clear(self):
        return _neutrino.VectorOfTensor4D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfTensor4D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfTensor4D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfTensor4D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfTensor4D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfTensor4D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfTensor4D_front(self)

    def back(self):
        return _neutrino.VectorOfTensor4D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfTensor4D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfTensor4D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfTensor4D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfTensor4D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfTensor4D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfTensor4D
    __del__ = lambda self: None
VectorOfTensor4D_swigregister = _neutrino.VectorOfTensor4D_swigregister
VectorOfTensor4D_swigregister(VectorOfTensor4D)

class VectorOfImageMeta2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfImageMeta2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfImageMeta2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfImageMeta2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfImageMeta2D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfImageMeta2D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfImageMeta2D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfImageMeta2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfImageMeta2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfImageMeta2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfImageMeta2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfImageMeta2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfImageMeta2D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfImageMeta2D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfImageMeta2D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfImageMeta2D_empty(self)

    def size(self):
        return _neutrino.VectorOfImageMeta2D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfImageMeta2D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfImageMeta2D_begin(self)

    def end(self):
        return _neutrino.VectorOfImageMeta2D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfImageMeta2D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfImageMeta2D_rend(self)

    def clear(self):
        return _neutrino.VectorOfImageMeta2D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfImageMeta2D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfImageMeta2D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfImageMeta2D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfImageMeta2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfImageMeta2D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfImageMeta2D_front(self)

    def back(self):
        return _neutrino.VectorOfImageMeta2D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfImageMeta2D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfImageMeta2D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfImageMeta2D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfImageMeta2D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfImageMeta2D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfImageMeta2D
    __del__ = lambda self: None
VectorOfImageMeta2D_swigregister = _neutrino.VectorOfImageMeta2D_swigregister
VectorOfImageMeta2D_swigregister(VectorOfImageMeta2D)

class VectorOfImageMeta3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfImageMeta3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfImageMeta3D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfImageMeta3D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfImageMeta3D___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfImageMeta3D___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfImageMeta3D___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfImageMeta3D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfImageMeta3D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfImageMeta3D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfImageMeta3D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfImageMeta3D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfImageMeta3D___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfImageMeta3D_pop(self)

    def append(self, x):
        return _neutrino.VectorOfImageMeta3D_append(self, x)

    def empty(self):
        return _neutrino.VectorOfImageMeta3D_empty(self)

    def size(self):
        return _neutrino.VectorOfImageMeta3D_size(self)

    def swap(self, v):
        return _neutrino.VectorOfImageMeta3D_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfImageMeta3D_begin(self)

    def end(self):
        return _neutrino.VectorOfImageMeta3D_end(self)

    def rbegin(self):
        return _neutrino.VectorOfImageMeta3D_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfImageMeta3D_rend(self)

    def clear(self):
        return _neutrino.VectorOfImageMeta3D_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfImageMeta3D_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfImageMeta3D_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfImageMeta3D_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfImageMeta3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfImageMeta3D_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfImageMeta3D_front(self)

    def back(self):
        return _neutrino.VectorOfImageMeta3D_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfImageMeta3D_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfImageMeta3D_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfImageMeta3D_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfImageMeta3D_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfImageMeta3D_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfImageMeta3D
    __del__ = lambda self: None
VectorOfImageMeta3D_swigregister = _neutrino.VectorOfImageMeta3D_swigregister
VectorOfImageMeta3D_swigregister(VectorOfImageMeta3D)

class ProcessBase(neutrino_base):
    __swig_setmethods__ = {}
    for _s in [neutrino_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessBase, name, value)
    __swig_getmethods__ = {}
    for _s in [neutrino_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _neutrino.delete_ProcessBase
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.ProcessBase_configure(self, arg2)

    def initialize(self):
        return _neutrino.ProcessBase_initialize(self)

    def process(self, mgr):
        return _neutrino.ProcessBase_process(self, mgr)

    def finalize(self):
        return _neutrino.ProcessBase_finalize(self)

    def _is(self, question):
        return _neutrino.ProcessBase__is(self, question)

    def event_creator(self):
        return _neutrino.ProcessBase_event_creator(self)
ProcessBase_swigregister = _neutrino.ProcessBase_swigregister
ProcessBase_swigregister(ProcessBase)

class ProcessDriver(neutrino_base):
    __swig_setmethods__ = {}
    for _s in [neutrino_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [neutrino_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_ProcessDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_ProcessDriver
    __del__ = lambda self: None

    def configure(self, *args):
        return _neutrino.ProcessDriver_configure(self, *args)

    def override_input_file(self, flist):
        return _neutrino.ProcessDriver_override_input_file(self, flist)

    def override_output_file(self, fname):
        return _neutrino.ProcessDriver_override_output_file(self, fname)

    def override_ana_file(self, fname):
        return _neutrino.ProcessDriver_override_ana_file(self, fname)

    def random_access(self, flag):
        return _neutrino.ProcessDriver_random_access(self, flag)

    def reset(self):
        return _neutrino.ProcessDriver_reset(self)

    def initialize(self, color=0):
        return _neutrino.ProcessDriver_initialize(self, color)

    def batch_process(self, start_entry=0, num_entries=0):
        return _neutrino.ProcessDriver_batch_process(self, start_entry, num_entries)

    def process_entry(self, *args):
        return _neutrino.ProcessDriver_process_entry(self, *args)

    def finalize(self):
        return _neutrino.ProcessDriver_finalize(self)

    def clear_entry(self):
        return _neutrino.ProcessDriver_clear_entry(self)

    def set_id(self, run, subrun, event):
        return _neutrino.ProcessDriver_set_id(self, run, subrun, event)

    def event_id(self):
        return _neutrino.ProcessDriver_event_id(self)

    def process_id(self, name):
        return _neutrino.ProcessDriver_process_id(self, name)

    def process_names(self):
        return _neutrino.ProcessDriver_process_names(self)

    def process_map(self):
        return _neutrino.ProcessDriver_process_map(self)

    def process_ptr(self, id):
        return _neutrino.ProcessDriver_process_ptr(self, id)

    def io(self):
        return _neutrino.ProcessDriver_io(self)

    def get_tree_index(self, entry):
        return _neutrino.ProcessDriver_get_tree_index(self, entry)

    def processing(self):
        return _neutrino.ProcessDriver_processing(self)
ProcessDriver_swigregister = _neutrino.ProcessDriver_swigregister
ProcessDriver_swigregister(ProcessDriver)

class ProcessFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessFactoryBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _neutrino.delete_ProcessFactoryBase
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.ProcessFactoryBase_create(self, instance_name)
ProcessFactoryBase_swigregister = _neutrino.ProcessFactoryBase_swigregister
ProcessFactoryBase_swigregister(ProcessFactoryBase)

class ProcessFactory(neutrino_base):
    __swig_setmethods__ = {}
    for _s in [neutrino_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [neutrino_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_ProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_ProcessFactory
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.ProcessFactory_get)
    else:
        get = _neutrino.ProcessFactory_get

    def add_factory(self, name, factory):
        return _neutrino.ProcessFactory_add_factory(self, name, factory)

    def create(self, name, instance_name):
        return _neutrino.ProcessFactory_create(self, name, instance_name)
ProcessFactory_swigregister = _neutrino.ProcessFactory_swigregister
ProcessFactory_swigregister(ProcessFactory)

def ProcessFactory_get():
    return _neutrino.ProcessFactory_get()
ProcessFactory_get = _neutrino.ProcessFactory_get

class CSVData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSVData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSVData, name)
    __repr__ = _swig_repr
    ValueType_t_kSTRING = _neutrino.CSVData_ValueType_t_kSTRING
    ValueType_t_kBOOL = _neutrino.CSVData_ValueType_t_kBOOL
    ValueType_t_kINT = _neutrino.CSVData_ValueType_t_kINT
    ValueType_t_kFLOAT = _neutrino.CSVData_ValueType_t_kFLOAT
    ValueType_t_kDOUBLE = _neutrino.CSVData_ValueType_t_kDOUBLE
    __swig_destroy__ = _neutrino.delete_CSVData
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _neutrino.new_CSVData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _neutrino.CSVData_clear(self)

    def read_file(self, *args):
        return _neutrino.CSVData_read_file(self, *args)

    def get_string(self, key):
        return _neutrino.CSVData_get_string(self, key)

    def get_int(self, key):
        return _neutrino.CSVData_get_int(self, key)

    def get_bool(self, key):
        return _neutrino.CSVData_get_bool(self, key)

    def get_float(self, key):
        return _neutrino.CSVData_get_float(self, key)

    def get_double(self, key):
        return _neutrino.CSVData_get_double(self, key)
CSVData_swigregister = _neutrino.CSVData_swigregister
CSVData_swigregister(CSVData)


def read_csv(fname, format):
    return _neutrino.read_csv(fname, format)
read_csv = _neutrino.read_csv
class RandomGaus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomGaus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomGaus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_RandomGaus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_RandomGaus
    __del__ = lambda self: None

    def reset(self, mean, sigma):
        return _neutrino.RandomGaus_reset(self, mean, sigma)

    def start_filling(self):
        return _neutrino.RandomGaus_start_filling(self)

    def get(self, container):
        return _neutrino.RandomGaus_get(self, container)
RandomGaus_swigregister = _neutrino.RandomGaus_swigregister
RandomGaus_swigregister(RandomGaus)


def SetPyUtil():
    return _neutrino.SetPyUtil()
SetPyUtil = _neutrino.SetPyUtil

def as_ndarray_int(data):
    return _neutrino.as_ndarray_int(data)
as_ndarray_int = _neutrino.as_ndarray_int

def as_ndarray_uint(data):
    return _neutrino.as_ndarray_uint(data)
as_ndarray_uint = _neutrino.as_ndarray_uint

def as_ndarray_sizet(data):
    return _neutrino.as_ndarray_sizet(data)
as_ndarray_sizet = _neutrino.as_ndarray_sizet

def as_ndarray_float(data):
    return _neutrino.as_ndarray_float(data)
as_ndarray_float = _neutrino.as_ndarray_float

def as_ndarray_double(data):
    return _neutrino.as_ndarray_double(data)
as_ndarray_double = _neutrino.as_ndarray_double

def as_ndarray(*args):
    return _neutrino.as_ndarray(*args)
as_ndarray = _neutrino.as_ndarray

def copy_array_uint(arrayin, cvec):
    return _neutrino.copy_array_uint(arrayin, cvec)
copy_array_uint = _neutrino.copy_array_uint

def copy_array_int(arrayin, cvec):
    return _neutrino.copy_array_int(arrayin, cvec)
copy_array_int = _neutrino.copy_array_int

def copy_array(*args):
    return _neutrino.copy_array(*args)
copy_array = _neutrino.copy_array

def copy_array_float(arrayin, cvec):
    return _neutrino.copy_array_float(arrayin, cvec)
copy_array_float = _neutrino.copy_array_float

def copy_array_double(arrayin, cvec):
    return _neutrino.copy_array_double(arrayin, cvec)
copy_array_double = _neutrino.copy_array_double

def as_image2d_meta(arg1, meta):
    return _neutrino.as_image2d_meta(arg1, meta)
as_image2d_meta = _neutrino.as_image2d_meta

def as_image2d(arg1):
    return _neutrino.as_image2d(arg1)
as_image2d = _neutrino.as_image2d

def as_tensor1d(arg1):
    return _neutrino.as_tensor1d(arg1)
as_tensor1d = _neutrino.as_tensor1d

def as_tensor3d(arg1):
    return _neutrino.as_tensor3d(arg1)
as_tensor3d = _neutrino.as_tensor3d

def as_tensor4d(arg1):
    return _neutrino.as_tensor4d(arg1)
as_tensor4d = _neutrino.as_tensor4d

def as_voxelset(values, indexes):
    return _neutrino.as_voxelset(values, indexes)
as_voxelset = _neutrino.as_voxelset
class EmptyImageFilter(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyImageFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyImageFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_EmptyImageFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EmptyImageFilter
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.EmptyImageFilter_configure(self, arg2)

    def initialize(self):
        return _neutrino.EmptyImageFilter_initialize(self)

    def process(self, mgr):
        return _neutrino.EmptyImageFilter_process(self, mgr)

    def finalize(self):
        return _neutrino.EmptyImageFilter_finalize(self)
EmptyImageFilter_swigregister = _neutrino.EmptyImageFilter_swigregister
EmptyImageFilter_swigregister(EmptyImageFilter)

class EmptyImageFilterProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyImageFilterProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyImageFilterProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EmptyImageFilterProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EmptyImageFilterProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.EmptyImageFilterProcessFactory_create(self, instance_name)
EmptyImageFilterProcessFactory_swigregister = _neutrino.EmptyImageFilterProcessFactory_swigregister
EmptyImageFilterProcessFactory_swigregister(EmptyImageFilterProcessFactory)

class EmptyTensorFilter(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyTensorFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyTensorFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_EmptyTensorFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EmptyTensorFilter
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.EmptyTensorFilter_configure(self, arg2)

    def initialize(self):
        return _neutrino.EmptyTensorFilter_initialize(self)

    def process(self, mgr):
        return _neutrino.EmptyTensorFilter_process(self, mgr)

    def finalize(self):
        return _neutrino.EmptyTensorFilter_finalize(self)
EmptyTensorFilter_swigregister = _neutrino.EmptyTensorFilter_swigregister
EmptyTensorFilter_swigregister(EmptyTensorFilter)

class EmptyTensorFilterProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyTensorFilterProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyTensorFilterProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EmptyTensorFilterProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EmptyTensorFilterProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.EmptyTensorFilterProcessFactory_create(self, instance_name)
EmptyTensorFilterProcessFactory_swigregister = _neutrino.EmptyTensorFilterProcessFactory_swigregister
EmptyTensorFilterProcessFactory_swigregister(EmptyTensorFilterProcessFactory)

class EventIDFilter(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventIDFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventIDFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_EventIDFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventIDFilter
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.EventIDFilter_configure(self, arg2)

    def initialize(self):
        return _neutrino.EventIDFilter_initialize(self)

    def process(self, mgr):
        return _neutrino.EventIDFilter_process(self, mgr)

    def finalize(self):
        return _neutrino.EventIDFilter_finalize(self)
EventIDFilter_swigregister = _neutrino.EventIDFilter_swigregister
EventIDFilter_swigregister(EventIDFilter)

class EventIDFilterProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventIDFilterProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventIDFilterProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_EventIDFilterProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_EventIDFilterProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.EventIDFilterProcessFactory_create(self, instance_name)
EventIDFilterProcessFactory_swigregister = _neutrino.EventIDFilterProcessFactory_swigregister
EventIDFilterProcessFactory_swigregister(EventIDFilterProcessFactory)

class MCSingleParticleFilter(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCSingleParticleFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCSingleParticleFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_MCSingleParticleFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_MCSingleParticleFilter
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.MCSingleParticleFilter_configure(self, arg2)

    def initialize(self):
        return _neutrino.MCSingleParticleFilter_initialize(self)

    def process(self, mgr):
        return _neutrino.MCSingleParticleFilter_process(self, mgr)

    def finalize(self):
        return _neutrino.MCSingleParticleFilter_finalize(self)
MCSingleParticleFilter_swigregister = _neutrino.MCSingleParticleFilter_swigregister
MCSingleParticleFilter_swigregister(MCSingleParticleFilter)

class MCSingleParticleFilterProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCSingleParticleFilterProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCSingleParticleFilterProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_MCSingleParticleFilterProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_MCSingleParticleFilterProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.MCSingleParticleFilterProcessFactory_create(self, instance_name)
MCSingleParticleFilterProcessFactory_swigregister = _neutrino.MCSingleParticleFilterProcessFactory_swigregister
MCSingleParticleFilterProcessFactory_swigregister(MCSingleParticleFilterProcessFactory)

class ParticleCountFilter(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleCountFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleCountFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_ParticleCountFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_ParticleCountFilter
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.ParticleCountFilter_configure(self, arg2)

    def initialize(self):
        return _neutrino.ParticleCountFilter_initialize(self)

    def process(self, mgr):
        return _neutrino.ParticleCountFilter_process(self, mgr)

    def finalize(self):
        return _neutrino.ParticleCountFilter_finalize(self)
ParticleCountFilter_swigregister = _neutrino.ParticleCountFilter_swigregister
ParticleCountFilter_swigregister(ParticleCountFilter)

class ParticleCountFilterProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleCountFilterProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleCountFilterProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_ParticleCountFilterProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_ParticleCountFilterProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.ParticleCountFilterProcessFactory_create(self, instance_name)
ParticleCountFilterProcessFactory_swigregister = _neutrino.ParticleCountFilterProcessFactory_swigregister
ParticleCountFilterProcessFactory_swigregister(ParticleCountFilterProcessFactory)

class QSumFilter(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QSumFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QSumFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_QSumFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_QSumFilter
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.QSumFilter_configure(self, arg2)

    def initialize(self):
        return _neutrino.QSumFilter_initialize(self)

    def process(self, mgr):
        return _neutrino.QSumFilter_process(self, mgr)

    def finalize(self):
        return _neutrino.QSumFilter_finalize(self)
QSumFilter_swigregister = _neutrino.QSumFilter_swigregister
QSumFilter_swigregister(QSumFilter)

class QSumFilterProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QSumFilterProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QSumFilterProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_QSumFilterProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_QSumFilterProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.QSumFilterProcessFactory_create(self, instance_name)
QSumFilterProcessFactory_swigregister = _neutrino.QSumFilterProcessFactory_swigregister
QSumFilterProcessFactory_swigregister(QSumFilterProcessFactory)

kThreadStateIdle = _neutrino.kThreadStateIdle
kThreadStateStarting = _neutrino.kThreadStateStarting
kThreadStateRunning = _neutrino.kThreadStateRunning
kThreadStateUnknown = _neutrino.kThreadStateUnknown
BatchDataType_t_kBatchDataUnknown = _neutrino.BatchDataType_t_kBatchDataUnknown
BatchDataType_t_kBatchDataChar = _neutrino.BatchDataType_t_kBatchDataChar
BatchDataType_t_kBatchDataShort = _neutrino.BatchDataType_t_kBatchDataShort
BatchDataType_t_kBatchDataInt = _neutrino.BatchDataType_t_kBatchDataInt
BatchDataType_t_kBatchDataFloat = _neutrino.BatchDataType_t_kBatchDataFloat
BatchDataType_t_kBatchDataDouble = _neutrino.BatchDataType_t_kBatchDataDouble
BatchDataType_t_kBatchDataString = _neutrino.BatchDataType_t_kBatchDataString

def BatchDataTypeName(type):
    return _neutrino.BatchDataTypeName(type)
BatchDataTypeName = _neutrino.BatchDataTypeName
BatchDataState_t_kBatchStateUnknown = _neutrino.BatchDataState_t_kBatchStateUnknown
BatchDataState_t_kBatchStateEmpty = _neutrino.BatchDataState_t_kBatchStateEmpty
BatchDataState_t_kBatchStateFilling = _neutrino.BatchDataState_t_kBatchStateFilling
BatchDataState_t_kBatchStateFilled = _neutrino.BatchDataState_t_kBatchStateFilled
BatchDataState_t_kBatchStateReleased = _neutrino.BatchDataState_t_kBatchStateReleased
class ThreadProcessor(neutrino_base):
    __swig_setmethods__ = {}
    for _s in [neutrino_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadProcessor, name, value)
    __swig_getmethods__ = {}
    for _s in [neutrino_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadProcessor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_ThreadProcessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_ThreadProcessor
    __del__ = lambda self: None

    def batch_process(self, nentries):
        return _neutrino.ThreadProcessor_batch_process(self, nentries)

    def start_manager(self, nentries):
        return _neutrino.ThreadProcessor_start_manager(self, nentries)

    def stop_manager(self):
        return _neutrino.ThreadProcessor_stop_manager(self)

    def manager_started(self):
        return _neutrino.ThreadProcessor_manager_started(self)

    def reset(self):
        return _neutrino.ThreadProcessor_reset(self)

    def configure(self, *args):
        return _neutrino.ThreadProcessor_configure(self, *args)

    def configured(self):
        return _neutrino.ThreadProcessor_configured(self)

    def release_data(self, *args):
        return _neutrino.ThreadProcessor_release_data(self, *args)

    def storage_status_array(self):
        return _neutrino.ThreadProcessor_storage_status_array(self)

    def num_threads(self):
        return _neutrino.ThreadProcessor_num_threads(self)

    def set_next_index(self, index):
        return _neutrino.ThreadProcessor_set_next_index(self, index)

    def set_next_batch(self, index_v):
        return _neutrino.ThreadProcessor_set_next_batch(self, index_v)

    def set_start_entry(self, entry):
        return _neutrino.ThreadProcessor_set_start_entry(self, entry)

    def set_entries_skip(self, nskip):
        return _neutrino.ThreadProcessor_set_entries_skip(self, nskip)

    def thread_running(self, *args):
        return _neutrino.ThreadProcessor_thread_running(self, *args)

    def num_thread_running(self):
        return _neutrino.ThreadProcessor_num_thread_running(self)

    def status_dump(self):
        return _neutrino.ThreadProcessor_status_dump(self)

    def process_counter(self, *args):
        return _neutrino.ThreadProcessor_process_counter(self, *args)

    def thread_status(self):
        return _neutrino.ThreadProcessor_thread_status(self)

    def get_n_entries(self):
        return _neutrino.ThreadProcessor_get_n_entries(self)

    def batch_id(self, storage_id):
        return _neutrino.ThreadProcessor_batch_id(self, storage_id)

    def thread_exec_counters(self):
        return _neutrino.ThreadProcessor_thread_exec_counters(self)

    def processed_entries(self, storage_id=0):
        return _neutrino.ThreadProcessor_processed_entries(self, storage_id)

    def processed_events(self, storage_id):
        return _neutrino.ThreadProcessor_processed_events(self, storage_id)

    def pd(self, thread_id=0):
        return _neutrino.ThreadProcessor_pd(self, thread_id)

    def storage_name(self, process_id):
        return _neutrino.ThreadProcessor_storage_name(self, process_id)

    def process_id(self, name):
        return _neutrino.ThreadProcessor_process_id(self, name)

    def batch_fillers(self):
        return _neutrino.ThreadProcessor_batch_fillers(self)

    def batch_types(self):
        return _neutrino.ThreadProcessor_batch_types(self)

    def num_batch_storage(self):
        return _neutrino.ThreadProcessor_num_batch_storage(self)

    def wait(self, duration):
        return _neutrino.ThreadProcessor_wait(self, duration)
ThreadProcessor_swigregister = _neutrino.ThreadProcessor_swigregister
ThreadProcessor_swigregister(ThreadProcessor)

class QueueProcessor(neutrino_base):
    __swig_setmethods__ = {}
    for _s in [neutrino_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueueProcessor, name, value)
    __swig_getmethods__ = {}
    for _s in [neutrino_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QueueProcessor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_QueueProcessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_QueueProcessor
    __del__ = lambda self: None

    def batch_process(self):
        return _neutrino.QueueProcessor_batch_process(self)

    def reset(self):
        return _neutrino.QueueProcessor_reset(self)

    def configure(self, *args):
        return _neutrino.QueueProcessor_configure(self, *args)

    def configured(self):
        return _neutrino.QueueProcessor_configured(self)

    def pop_current_data(self):
        return _neutrino.QueueProcessor_pop_current_data(self)

    def set_next_index(self, index):
        return _neutrino.QueueProcessor_set_next_index(self, index)

    def set_next_batch(self, index_v):
        return _neutrino.QueueProcessor_set_next_batch(self, index_v)

    def is_reading(self):
        return _neutrino.QueueProcessor_is_reading(self)

    def get_n_entries(self):
        return _neutrino.QueueProcessor_get_n_entries(self)

    def processed_entries(self):
        return _neutrino.QueueProcessor_processed_entries(self)

    def processed_events(self):
        return _neutrino.QueueProcessor_processed_events(self)

    def pd(self):
        return _neutrino.QueueProcessor_pd(self)

    def storage_name(self, process_id):
        return _neutrino.QueueProcessor_storage_name(self, process_id)

    def process_id(self, name):
        return _neutrino.QueueProcessor_process_id(self, name)

    def batch_fillers(self):
        return _neutrino.QueueProcessor_batch_fillers(self)

    def batch_types(self):
        return _neutrino.QueueProcessor_batch_types(self)
QueueProcessor_swigregister = _neutrino.QueueProcessor_swigregister
QueueProcessor_swigregister(QueueProcessor)

class BatchFillerTemplateFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchFillerTemplateFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchFillerTemplateFloat, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _neutrino.delete_BatchFillerTemplateFloat
    __del__ = lambda self: None

    def batch_begin(self):
        return _neutrino.BatchFillerTemplateFloat_batch_begin(self)

    def batch_end(self):
        return _neutrino.BatchFillerTemplateFloat_batch_end(self)

    def batch_data(self):
        return _neutrino.BatchFillerTemplateFloat_batch_data(self)

    def data_type(self):
        return _neutrino.BatchFillerTemplateFloat_data_type(self)

    def type_size(self):
        return _neutrino.BatchFillerTemplateFloat_type_size(self)
BatchFillerTemplateFloat_swigregister = _neutrino.BatchFillerTemplateFloat_swigregister
BatchFillerTemplateFloat_swigregister(BatchFillerTemplateFloat)

class VectorOfBatchDataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfBatchDataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfBatchDataType, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfBatchDataType_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfBatchDataType___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfBatchDataType___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfBatchDataType___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfBatchDataType___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfBatchDataType___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfBatchDataType___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfBatchDataType___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfBatchDataType___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfBatchDataType___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfBatchDataType_pop(self)

    def append(self, x):
        return _neutrino.VectorOfBatchDataType_append(self, x)

    def empty(self):
        return _neutrino.VectorOfBatchDataType_empty(self)

    def size(self):
        return _neutrino.VectorOfBatchDataType_size(self)

    def swap(self, v):
        return _neutrino.VectorOfBatchDataType_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfBatchDataType_begin(self)

    def end(self):
        return _neutrino.VectorOfBatchDataType_end(self)

    def rbegin(self):
        return _neutrino.VectorOfBatchDataType_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfBatchDataType_rend(self)

    def clear(self):
        return _neutrino.VectorOfBatchDataType_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfBatchDataType_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfBatchDataType_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfBatchDataType_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfBatchDataType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfBatchDataType_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfBatchDataType_front(self)

    def back(self):
        return _neutrino.VectorOfBatchDataType_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfBatchDataType_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfBatchDataType_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfBatchDataType_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfBatchDataType_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfBatchDataType_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfBatchDataType
    __del__ = lambda self: None
VectorOfBatchDataType_swigregister = _neutrino.VectorOfBatchDataType_swigregister
VectorOfBatchDataType_swigregister(VectorOfBatchDataType)

class VectorOfBatchDataState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfBatchDataState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfBatchDataState, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neutrino.VectorOfBatchDataState_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neutrino.VectorOfBatchDataState___nonzero__(self)

    def __bool__(self):
        return _neutrino.VectorOfBatchDataState___bool__(self)

    def __len__(self):
        return _neutrino.VectorOfBatchDataState___len__(self)

    def __getslice__(self, i, j):
        return _neutrino.VectorOfBatchDataState___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neutrino.VectorOfBatchDataState___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neutrino.VectorOfBatchDataState___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neutrino.VectorOfBatchDataState___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neutrino.VectorOfBatchDataState___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neutrino.VectorOfBatchDataState___setitem__(self, *args)

    def pop(self):
        return _neutrino.VectorOfBatchDataState_pop(self)

    def append(self, x):
        return _neutrino.VectorOfBatchDataState_append(self, x)

    def empty(self):
        return _neutrino.VectorOfBatchDataState_empty(self)

    def size(self):
        return _neutrino.VectorOfBatchDataState_size(self)

    def swap(self, v):
        return _neutrino.VectorOfBatchDataState_swap(self, v)

    def begin(self):
        return _neutrino.VectorOfBatchDataState_begin(self)

    def end(self):
        return _neutrino.VectorOfBatchDataState_end(self)

    def rbegin(self):
        return _neutrino.VectorOfBatchDataState_rbegin(self)

    def rend(self):
        return _neutrino.VectorOfBatchDataState_rend(self)

    def clear(self):
        return _neutrino.VectorOfBatchDataState_clear(self)

    def get_allocator(self):
        return _neutrino.VectorOfBatchDataState_get_allocator(self)

    def pop_back(self):
        return _neutrino.VectorOfBatchDataState_pop_back(self)

    def erase(self, *args):
        return _neutrino.VectorOfBatchDataState_erase(self, *args)

    def __init__(self, *args):
        this = _neutrino.new_VectorOfBatchDataState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _neutrino.VectorOfBatchDataState_push_back(self, x)

    def front(self):
        return _neutrino.VectorOfBatchDataState_front(self)

    def back(self):
        return _neutrino.VectorOfBatchDataState_back(self)

    def assign(self, n, x):
        return _neutrino.VectorOfBatchDataState_assign(self, n, x)

    def resize(self, *args):
        return _neutrino.VectorOfBatchDataState_resize(self, *args)

    def insert(self, *args):
        return _neutrino.VectorOfBatchDataState_insert(self, *args)

    def reserve(self, n):
        return _neutrino.VectorOfBatchDataState_reserve(self, n)

    def capacity(self):
        return _neutrino.VectorOfBatchDataState_capacity(self)
    __swig_destroy__ = _neutrino.delete_VectorOfBatchDataState
    __del__ = lambda self: None
VectorOfBatchDataState_swigregister = _neutrino.VectorOfBatchDataState_swigregister
VectorOfBatchDataState_swigregister(VectorOfBatchDataState)

class BatchDataStorageFactoryFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataStorageFactoryFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataStorageFactoryFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataStorageFactoryFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataStorageFactoryFloat
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.BatchDataStorageFactoryFloat_get)
    else:
        get = _neutrino.BatchDataStorageFactoryFloat_get

    def exist_storage(self, name):
        return _neutrino.BatchDataStorageFactoryFloat_exist_storage(self, name)

    def get_storage(self, name):
        return _neutrino.BatchDataStorageFactoryFloat_get_storage(self, name)

    def make_storage(self, name, num_batch=1):
        return _neutrino.BatchDataStorageFactoryFloat_make_storage(self, name, num_batch)

    def get_storage_writeable(self, name):
        return _neutrino.BatchDataStorageFactoryFloat_get_storage_writeable(self, name)
BatchDataStorageFactoryFloat_swigregister = _neutrino.BatchDataStorageFactoryFloat_swigregister
BatchDataStorageFactoryFloat_swigregister(BatchDataStorageFactoryFloat)

def BatchDataStorageFactoryFloat_get():
    return _neutrino.BatchDataStorageFactoryFloat_get()
BatchDataStorageFactoryFloat_get = _neutrino.BatchDataStorageFactoryFloat_get

class BatchDataQueueFactoryFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataQueueFactoryFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataQueueFactoryFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataQueueFactoryFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataQueueFactoryFloat
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.BatchDataQueueFactoryFloat_get)
    else:
        get = _neutrino.BatchDataQueueFactoryFloat_get

    def exist_queue(self, name):
        return _neutrino.BatchDataQueueFactoryFloat_exist_queue(self, name)

    def is_next_ready(self):
        return _neutrino.BatchDataQueueFactoryFloat_is_next_ready(self)

    def pop_all(self):
        return _neutrino.BatchDataQueueFactoryFloat_pop_all(self)

    def get_queue(self, name):
        return _neutrino.BatchDataQueueFactoryFloat_get_queue(self, name)

    def make_queue(self, name):
        return _neutrino.BatchDataQueueFactoryFloat_make_queue(self, name)

    def get_queue_writeable(self, name):
        return _neutrino.BatchDataQueueFactoryFloat_get_queue_writeable(self, name)
BatchDataQueueFactoryFloat_swigregister = _neutrino.BatchDataQueueFactoryFloat_swigregister
BatchDataQueueFactoryFloat_swigregister(BatchDataQueueFactoryFloat)

def BatchDataQueueFactoryFloat_get():
    return _neutrino.BatchDataQueueFactoryFloat_get()
BatchDataQueueFactoryFloat_get = _neutrino.BatchDataQueueFactoryFloat_get

class BatchDataStorageFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataStorageFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataStorageFloat, name)
    __repr__ = _swig_repr

    def __init__(self, num_batch=1):
        this = _neutrino.new_BatchDataStorageFloat(num_batch)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataStorageFloat
    __del__ = lambda self: None

    def reset(self, num_batch):
        return _neutrino.BatchDataStorageFloat_reset(self, num_batch)

    def num_batch(self):
        return _neutrino.BatchDataStorageFloat_num_batch(self)

    def batch_state(self, batch_id):
        return _neutrino.BatchDataStorageFloat_batch_state(self, batch_id)

    def is_any_batch_ready(self):
        return _neutrino.BatchDataStorageFloat_is_any_batch_ready(self)

    def is_batch_ready(self, batch_id):
        return _neutrino.BatchDataStorageFloat_is_batch_ready(self, batch_id)

    def get_any_batch(self):
        return _neutrino.BatchDataStorageFloat_get_any_batch(self)

    def get_batch(self, batch_id):
        return _neutrino.BatchDataStorageFloat_get_batch(self, batch_id)

    def get_batch_writeable(self, batch_id):
        return _neutrino.BatchDataStorageFloat_get_batch_writeable(self, batch_id)

    def set_entry_data(self, source, batch_id):
        return _neutrino.BatchDataStorageFloat_set_entry_data(self, source, batch_id)

    def reset_batch(self, *args):
        return _neutrino.BatchDataStorageFloat_reset_batch(self, *args)
BatchDataStorageFloat_swigregister = _neutrino.BatchDataStorageFloat_swigregister
BatchDataStorageFloat_swigregister(BatchDataStorageFloat)

class BatchDataQueueFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataQueueFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataQueueFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataQueueFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataQueueFloat
    __del__ = lambda self: None

    def reset(self):
        return _neutrino.BatchDataQueueFloat_reset(self)

    def next_state(self):
        return _neutrino.BatchDataQueueFloat_next_state(self)

    def is_next_ready(self):
        return _neutrino.BatchDataQueueFloat_is_next_ready(self)

    def get_batch(self):
        return _neutrino.BatchDataQueueFloat_get_batch(self)

    def pop(self):
        return _neutrino.BatchDataQueueFloat_pop(self)

    def get_next_writeable(self):
        return _neutrino.BatchDataQueueFloat_get_next_writeable(self)

    def set_next_data(self, source):
        return _neutrino.BatchDataQueueFloat_set_next_data(self, source)
BatchDataQueueFloat_swigregister = _neutrino.BatchDataQueueFloat_swigregister
BatchDataQueueFloat_swigregister(BatchDataQueueFloat)

class BatchDataFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataFloat, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataFloat
    __del__ = lambda self: None

    def data(self):
        return _neutrino.BatchDataFloat_data(self)

    def pydata(self):
        return _neutrino.BatchDataFloat_pydata(self)

    def dim(self):
        return _neutrino.BatchDataFloat_dim(self)

    def data_size(self, calculate=False):
        return _neutrino.BatchDataFloat_data_size(self, calculate)

    def current_data_size(self):
        return _neutrino.BatchDataFloat_current_data_size(self)

    def entry_data_size(self):
        return _neutrino.BatchDataFloat_entry_data_size(self)

    def set_dim(self, dim):
        return _neutrino.BatchDataFloat_set_dim(self, dim)

    def set_entry_data(self, entry_data):
        return _neutrino.BatchDataFloat_set_entry_data(self, entry_data)

    def reset(self):
        return _neutrino.BatchDataFloat_reset(self)

    def reset_data(self):
        return _neutrino.BatchDataFloat_reset_data(self)

    def is_filled(self):
        return _neutrino.BatchDataFloat_is_filled(self)

    def state(self):
        return _neutrino.BatchDataFloat_state(self)
BatchDataFloat_swigregister = _neutrino.BatchDataFloat_swigregister
BatchDataFloat_swigregister(BatchDataFloat)

class BatchDataStorageFactoryInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataStorageFactoryInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataStorageFactoryInt, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataStorageFactoryInt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataStorageFactoryInt
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.BatchDataStorageFactoryInt_get)
    else:
        get = _neutrino.BatchDataStorageFactoryInt_get

    def exist_storage(self, name):
        return _neutrino.BatchDataStorageFactoryInt_exist_storage(self, name)

    def get_storage(self, name):
        return _neutrino.BatchDataStorageFactoryInt_get_storage(self, name)

    def make_storage(self, name, num_batch=1):
        return _neutrino.BatchDataStorageFactoryInt_make_storage(self, name, num_batch)

    def get_storage_writeable(self, name):
        return _neutrino.BatchDataStorageFactoryInt_get_storage_writeable(self, name)
BatchDataStorageFactoryInt_swigregister = _neutrino.BatchDataStorageFactoryInt_swigregister
BatchDataStorageFactoryInt_swigregister(BatchDataStorageFactoryInt)

def BatchDataStorageFactoryInt_get():
    return _neutrino.BatchDataStorageFactoryInt_get()
BatchDataStorageFactoryInt_get = _neutrino.BatchDataStorageFactoryInt_get

class BatchDataQueueFactoryInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataQueueFactoryInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataQueueFactoryInt, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataQueueFactoryInt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataQueueFactoryInt
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.BatchDataQueueFactoryInt_get)
    else:
        get = _neutrino.BatchDataQueueFactoryInt_get

    def exist_queue(self, name):
        return _neutrino.BatchDataQueueFactoryInt_exist_queue(self, name)

    def is_next_ready(self):
        return _neutrino.BatchDataQueueFactoryInt_is_next_ready(self)

    def pop_all(self):
        return _neutrino.BatchDataQueueFactoryInt_pop_all(self)

    def get_queue(self, name):
        return _neutrino.BatchDataQueueFactoryInt_get_queue(self, name)

    def make_queue(self, name):
        return _neutrino.BatchDataQueueFactoryInt_make_queue(self, name)

    def get_queue_writeable(self, name):
        return _neutrino.BatchDataQueueFactoryInt_get_queue_writeable(self, name)
BatchDataQueueFactoryInt_swigregister = _neutrino.BatchDataQueueFactoryInt_swigregister
BatchDataQueueFactoryInt_swigregister(BatchDataQueueFactoryInt)

def BatchDataQueueFactoryInt_get():
    return _neutrino.BatchDataQueueFactoryInt_get()
BatchDataQueueFactoryInt_get = _neutrino.BatchDataQueueFactoryInt_get

class BatchDataStorageInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataStorageInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataStorageInt, name)
    __repr__ = _swig_repr

    def __init__(self, num_batch=1):
        this = _neutrino.new_BatchDataStorageInt(num_batch)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataStorageInt
    __del__ = lambda self: None

    def reset(self, num_batch):
        return _neutrino.BatchDataStorageInt_reset(self, num_batch)

    def num_batch(self):
        return _neutrino.BatchDataStorageInt_num_batch(self)

    def batch_state(self, batch_id):
        return _neutrino.BatchDataStorageInt_batch_state(self, batch_id)

    def is_any_batch_ready(self):
        return _neutrino.BatchDataStorageInt_is_any_batch_ready(self)

    def is_batch_ready(self, batch_id):
        return _neutrino.BatchDataStorageInt_is_batch_ready(self, batch_id)

    def get_any_batch(self):
        return _neutrino.BatchDataStorageInt_get_any_batch(self)

    def get_batch(self, batch_id):
        return _neutrino.BatchDataStorageInt_get_batch(self, batch_id)

    def get_batch_writeable(self, batch_id):
        return _neutrino.BatchDataStorageInt_get_batch_writeable(self, batch_id)

    def set_entry_data(self, source, batch_id):
        return _neutrino.BatchDataStorageInt_set_entry_data(self, source, batch_id)

    def reset_batch(self, *args):
        return _neutrino.BatchDataStorageInt_reset_batch(self, *args)
BatchDataStorageInt_swigregister = _neutrino.BatchDataStorageInt_swigregister
BatchDataStorageInt_swigregister(BatchDataStorageInt)

class BatchDataQueueInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataQueueInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataQueueInt, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataQueueInt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataQueueInt
    __del__ = lambda self: None

    def reset(self):
        return _neutrino.BatchDataQueueInt_reset(self)

    def next_state(self):
        return _neutrino.BatchDataQueueInt_next_state(self)

    def is_next_ready(self):
        return _neutrino.BatchDataQueueInt_is_next_ready(self)

    def get_batch(self):
        return _neutrino.BatchDataQueueInt_get_batch(self)

    def pop(self):
        return _neutrino.BatchDataQueueInt_pop(self)

    def get_next_writeable(self):
        return _neutrino.BatchDataQueueInt_get_next_writeable(self)

    def set_next_data(self, source):
        return _neutrino.BatchDataQueueInt_set_next_data(self, source)
BatchDataQueueInt_swigregister = _neutrino.BatchDataQueueInt_swigregister
BatchDataQueueInt_swigregister(BatchDataQueueInt)

class BatchDataInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataInt, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataInt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataInt
    __del__ = lambda self: None

    def data(self):
        return _neutrino.BatchDataInt_data(self)

    def pydata(self):
        return _neutrino.BatchDataInt_pydata(self)

    def dim(self):
        return _neutrino.BatchDataInt_dim(self)

    def data_size(self, calculate=False):
        return _neutrino.BatchDataInt_data_size(self, calculate)

    def current_data_size(self):
        return _neutrino.BatchDataInt_current_data_size(self)

    def entry_data_size(self):
        return _neutrino.BatchDataInt_entry_data_size(self)

    def set_dim(self, dim):
        return _neutrino.BatchDataInt_set_dim(self, dim)

    def set_entry_data(self, entry_data):
        return _neutrino.BatchDataInt_set_entry_data(self, entry_data)

    def reset(self):
        return _neutrino.BatchDataInt_reset(self)

    def reset_data(self):
        return _neutrino.BatchDataInt_reset_data(self)

    def is_filled(self):
        return _neutrino.BatchDataInt_is_filled(self)

    def state(self):
        return _neutrino.BatchDataInt_state(self)
BatchDataInt_swigregister = _neutrino.BatchDataInt_swigregister
BatchDataInt_swigregister(BatchDataInt)

class BatchDataStorageFactoryDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataStorageFactoryDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataStorageFactoryDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataStorageFactoryDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataStorageFactoryDouble
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.BatchDataStorageFactoryDouble_get)
    else:
        get = _neutrino.BatchDataStorageFactoryDouble_get

    def exist_storage(self, name):
        return _neutrino.BatchDataStorageFactoryDouble_exist_storage(self, name)

    def get_storage(self, name):
        return _neutrino.BatchDataStorageFactoryDouble_get_storage(self, name)

    def make_storage(self, name, num_batch=1):
        return _neutrino.BatchDataStorageFactoryDouble_make_storage(self, name, num_batch)

    def get_storage_writeable(self, name):
        return _neutrino.BatchDataStorageFactoryDouble_get_storage_writeable(self, name)
BatchDataStorageFactoryDouble_swigregister = _neutrino.BatchDataStorageFactoryDouble_swigregister
BatchDataStorageFactoryDouble_swigregister(BatchDataStorageFactoryDouble)

def BatchDataStorageFactoryDouble_get():
    return _neutrino.BatchDataStorageFactoryDouble_get()
BatchDataStorageFactoryDouble_get = _neutrino.BatchDataStorageFactoryDouble_get

class BatchDataQueueFactoryDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataQueueFactoryDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataQueueFactoryDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataQueueFactoryDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataQueueFactoryDouble
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_neutrino.BatchDataQueueFactoryDouble_get)
    else:
        get = _neutrino.BatchDataQueueFactoryDouble_get

    def exist_queue(self, name):
        return _neutrino.BatchDataQueueFactoryDouble_exist_queue(self, name)

    def is_next_ready(self):
        return _neutrino.BatchDataQueueFactoryDouble_is_next_ready(self)

    def pop_all(self):
        return _neutrino.BatchDataQueueFactoryDouble_pop_all(self)

    def get_queue(self, name):
        return _neutrino.BatchDataQueueFactoryDouble_get_queue(self, name)

    def make_queue(self, name):
        return _neutrino.BatchDataQueueFactoryDouble_make_queue(self, name)

    def get_queue_writeable(self, name):
        return _neutrino.BatchDataQueueFactoryDouble_get_queue_writeable(self, name)
BatchDataQueueFactoryDouble_swigregister = _neutrino.BatchDataQueueFactoryDouble_swigregister
BatchDataQueueFactoryDouble_swigregister(BatchDataQueueFactoryDouble)

def BatchDataQueueFactoryDouble_get():
    return _neutrino.BatchDataQueueFactoryDouble_get()
BatchDataQueueFactoryDouble_get = _neutrino.BatchDataQueueFactoryDouble_get

class BatchDataStorageDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataStorageDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataStorageDouble, name)
    __repr__ = _swig_repr

    def __init__(self, num_batch=1):
        this = _neutrino.new_BatchDataStorageDouble(num_batch)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataStorageDouble
    __del__ = lambda self: None

    def reset(self, num_batch):
        return _neutrino.BatchDataStorageDouble_reset(self, num_batch)

    def num_batch(self):
        return _neutrino.BatchDataStorageDouble_num_batch(self)

    def batch_state(self, batch_id):
        return _neutrino.BatchDataStorageDouble_batch_state(self, batch_id)

    def is_any_batch_ready(self):
        return _neutrino.BatchDataStorageDouble_is_any_batch_ready(self)

    def is_batch_ready(self, batch_id):
        return _neutrino.BatchDataStorageDouble_is_batch_ready(self, batch_id)

    def get_any_batch(self):
        return _neutrino.BatchDataStorageDouble_get_any_batch(self)

    def get_batch(self, batch_id):
        return _neutrino.BatchDataStorageDouble_get_batch(self, batch_id)

    def get_batch_writeable(self, batch_id):
        return _neutrino.BatchDataStorageDouble_get_batch_writeable(self, batch_id)

    def set_entry_data(self, source, batch_id):
        return _neutrino.BatchDataStorageDouble_set_entry_data(self, source, batch_id)

    def reset_batch(self, *args):
        return _neutrino.BatchDataStorageDouble_reset_batch(self, *args)
BatchDataStorageDouble_swigregister = _neutrino.BatchDataStorageDouble_swigregister
BatchDataStorageDouble_swigregister(BatchDataStorageDouble)

class BatchDataQueueDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataQueueDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataQueueDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataQueueDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataQueueDouble
    __del__ = lambda self: None

    def reset(self):
        return _neutrino.BatchDataQueueDouble_reset(self)

    def next_state(self):
        return _neutrino.BatchDataQueueDouble_next_state(self)

    def is_next_ready(self):
        return _neutrino.BatchDataQueueDouble_is_next_ready(self)

    def get_batch(self):
        return _neutrino.BatchDataQueueDouble_get_batch(self)

    def pop(self):
        return _neutrino.BatchDataQueueDouble_pop(self)

    def get_next_writeable(self):
        return _neutrino.BatchDataQueueDouble_get_next_writeable(self)

    def set_next_data(self, source):
        return _neutrino.BatchDataQueueDouble_set_next_data(self, source)
BatchDataQueueDouble_swigregister = _neutrino.BatchDataQueueDouble_swigregister
BatchDataQueueDouble_swigregister(BatchDataQueueDouble)

class BatchDataDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchDataDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BatchDataDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchDataDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchDataDouble
    __del__ = lambda self: None

    def data(self):
        return _neutrino.BatchDataDouble_data(self)

    def pydata(self):
        return _neutrino.BatchDataDouble_pydata(self)

    def dim(self):
        return _neutrino.BatchDataDouble_dim(self)

    def data_size(self, calculate=False):
        return _neutrino.BatchDataDouble_data_size(self, calculate)

    def current_data_size(self):
        return _neutrino.BatchDataDouble_current_data_size(self)

    def entry_data_size(self):
        return _neutrino.BatchDataDouble_entry_data_size(self)

    def set_dim(self, dim):
        return _neutrino.BatchDataDouble_set_dim(self, dim)

    def set_entry_data(self, entry_data):
        return _neutrino.BatchDataDouble_set_entry_data(self, entry_data)

    def reset(self):
        return _neutrino.BatchDataDouble_reset(self)

    def reset_data(self):
        return _neutrino.BatchDataDouble_reset_data(self)

    def is_filled(self):
        return _neutrino.BatchDataDouble_is_filled(self)

    def state(self):
        return _neutrino.BatchDataDouble_state(self)
BatchDataDouble_swigregister = _neutrino.BatchDataDouble_swigregister
BatchDataDouble_swigregister(BatchDataDouble)

class BatchFillerPIDLabel(BatchFillerTemplateFloat):
    __swig_setmethods__ = {}
    for _s in [BatchFillerTemplateFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchFillerPIDLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [BatchFillerTemplateFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BatchFillerPIDLabel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_BatchFillerPIDLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchFillerPIDLabel
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.BatchFillerPIDLabel_configure(self, arg2)

    def initialize(self):
        return _neutrino.BatchFillerPIDLabel_initialize(self)

    def process(self, mgr):
        return _neutrino.BatchFillerPIDLabel_process(self, mgr)

    def _batch_begin_(self):
        return _neutrino.BatchFillerPIDLabel__batch_begin_(self)

    def _batch_end_(self):
        return _neutrino.BatchFillerPIDLabel__batch_end_(self)

    def finalize(self):
        return _neutrino.BatchFillerPIDLabel_finalize(self)
BatchFillerPIDLabel_swigregister = _neutrino.BatchFillerPIDLabel_swigregister
BatchFillerPIDLabel_swigregister(BatchFillerPIDLabel)

class BatchFillerPIDLabelProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatchFillerPIDLabelProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BatchFillerPIDLabelProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_BatchFillerPIDLabelProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_BatchFillerPIDLabelProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.BatchFillerPIDLabelProcessFactory_create(self, instance_name)
BatchFillerPIDLabelProcessFactory_swigregister = _neutrino.BatchFillerPIDLabelProcessFactory_swigregister
BatchFillerPIDLabelProcessFactory_swigregister(BatchFillerPIDLabelProcessFactory)

class Image2DFromTensor2D(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image2DFromTensor2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image2DFromTensor2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Image2DFromTensor2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Image2DFromTensor2D
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.Image2DFromTensor2D_configure(self, arg2)

    def initialize(self):
        return _neutrino.Image2DFromTensor2D_initialize(self)

    def process(self, mgr):
        return _neutrino.Image2DFromTensor2D_process(self, mgr)

    def finalize(self):
        return _neutrino.Image2DFromTensor2D_finalize(self)
Image2DFromTensor2D_swigregister = _neutrino.Image2DFromTensor2D_swigregister
Image2DFromTensor2D_swigregister(Image2DFromTensor2D)

class Image2DFromTensor2DProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image2DFromTensor2DProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image2DFromTensor2DProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_Image2DFromTensor2DProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Image2DFromTensor2DProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.Image2DFromTensor2DProcessFactory_create(self, instance_name)
Image2DFromTensor2DProcessFactory_swigregister = _neutrino.Image2DFromTensor2DProcessFactory_swigregister
Image2DFromTensor2DProcessFactory_swigregister(Image2DFromTensor2DProcessFactory)

class Tensor2DFromImage2D(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor2DFromImage2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor2DFromImage2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Tensor2DFromImage2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Tensor2DFromImage2D
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.Tensor2DFromImage2D_configure(self, arg2)

    def initialize(self):
        return _neutrino.Tensor2DFromImage2D_initialize(self)

    def process(self, mgr):
        return _neutrino.Tensor2DFromImage2D_process(self, mgr)

    def finalize(self):
        return _neutrino.Tensor2DFromImage2D_finalize(self)
Tensor2DFromImage2D_swigregister = _neutrino.Tensor2DFromImage2D_swigregister
Tensor2DFromImage2D_swigregister(Tensor2DFromImage2D)

class Tensor2DFromImage2DProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor2DFromImage2DProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor2DFromImage2DProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_Tensor2DFromImage2DProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Tensor2DFromImage2DProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.Tensor2DFromImage2DProcessFactory_create(self, instance_name)
Tensor2DFromImage2DProcessFactory_swigregister = _neutrino.Tensor2DFromImage2DProcessFactory_swigregister
Tensor2DFromImage2DProcessFactory_swigregister(Tensor2DFromImage2DProcessFactory)

class Threshold(ProcessBase):
    __swig_setmethods__ = {}
    for _s in [ProcessBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Threshold, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Threshold, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neutrino.new_Threshold(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_Threshold
    __del__ = lambda self: None

    def configure(self, arg2):
        return _neutrino.Threshold_configure(self, arg2)

    def initialize(self):
        return _neutrino.Threshold_initialize(self)

    def process(self, mgr):
        return _neutrino.Threshold_process(self, mgr)

    def finalize(self):
        return _neutrino.Threshold_finalize(self)
Threshold_swigregister = _neutrino.Threshold_swigregister
Threshold_swigregister(Threshold)

class ThresholdProcessFactory(ProcessFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThresholdProcessFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ProcessFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThresholdProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neutrino.new_ThresholdProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neutrino.delete_ThresholdProcessFactory
    __del__ = lambda self: None

    def create(self, instance_name):
        return _neutrino.ThresholdProcessFactory_create(self, instance_name)
ThresholdProcessFactory_swigregister = _neutrino.ThresholdProcessFactory_swigregister
ThresholdProcessFactory_swigregister(ThresholdProcessFactory)

# This file is compatible with both classic and new-style classes.


